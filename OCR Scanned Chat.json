{"id":"c2053e04-367c-45b3-9dae-be4808af746f","data":{"nodes":[{"width":384,"height":333,"id":"CombineDocsChain-aEO5R","type":"genericNode","position":{"x":1335.9491596855519,"y":576.870536796627},"data":{"type":"CombineDocsChain","node":{"template":{"llm":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","type":"BaseLanguageModel","list":false},"chain_type":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"stuff","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"_type":"load_qa_chain"},"description":"Load question answering chain.","base_classes":["BaseCombineDocumentsChain","Callable"],"display_name":"CombineDocsChain","custom_fields":{},"output_types":[],"documentation":"","beta":false,"error":null},"id":"CombineDocsChain-aEO5R"},"selected":false,"positionAbsolute":{"x":1335.9491596855519,"y":576.870536796627}},{"width":384,"height":501,"id":"RecursiveCharacterTextSplitter-V03ji","type":"genericNode","position":{"x":177.74123774779434,"y":898.1899836356408},"data":{"type":"RecursiveCharacterTextSplitter","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chunk_overlap":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"150","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","type":"int","list":false},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"500","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","type":"int","list":false},"documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","type":"Document","list":true},"separators":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","type":"str","list":true,"value":[""]}},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","custom_fields":{"chunk_overlap":null,"chunk_size":null,"documents":null,"separators":null},"output_types":["RecursiveCharacterTextSplitter"],"documentation":"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter","beta":true,"error":null},"id":"RecursiveCharacterTextSplitter-V03ji"},"selected":false,"positionAbsolute":{"x":177.74123774779434,"y":898.1899836356408},"dragging":false},{"width":384,"height":339,"id":"RetrievalQA-8MZUd","type":"genericNode","position":{"x":1937.8188726975054,"y":769.1523739510492},"data":{"type":"RetrievalQA","node":{"template":{"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"combine_documents_chain":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"combine_documents_chain","advanced":false,"dynamic":false,"info":"","type":"BaseCombineDocumentsChain","list":false},"memory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"memory","advanced":false,"dynamic":false,"info":"","type":"BaseMemory","list":false},"retriever":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retriever","advanced":false,"dynamic":false,"info":"","type":"BaseRetriever","list":false},"input_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"query","password":false,"name":"input_key","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"output_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"result","password":false,"name":"output_key","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"return_source_documents":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"return_source_documents","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"tags":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"verbose","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"_type":"RetrievalQA"},"description":"Chain for question-answering against an index.","base_classes":["Chain","RetrievalQA","BaseRetrievalQA","Callable"],"display_name":"RetrievalQA","custom_fields":{},"output_types":[],"documentation":"https://python.langchain.com/docs/modules/chains/popular/vector_db_qa","beta":false,"error":null},"id":"RetrievalQA-8MZUd"},"selected":false,"positionAbsolute":{"x":1937.8188726975054,"y":769.1523739510492},"dragging":false},{"width":384,"height":483,"id":"EnsembleRetriever-CbNZR","type":"genericNode","position":{"x":1279.144798256169,"y":939.2863844490112},"data":{"type":"EnsembleRetriever","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import List\nfrom langchain.retrievers import BM25Retriever, EnsembleRetriever\nfrom langchain.schema import Document, BaseRetriever\nfrom langchain.vectorstores.base import VectorStore\n\nfrom genflow import CustomComponent\n\n\nclass EnsembleRetrieverComponent(CustomComponent):\n    display_name: str = \"Ensemble Retriever\"\n    description: str = \"The EnsembleRetriever takes a list of retrievers as input.\"\n    documentation: str = (\n        \"https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"retrievers\": {\n                \"display_name\": \"Retrievers\",\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": 2,\n                \"info\": \"The number of results to return.\",\n            },\n            \"weights\": {\n                \"display_name\": \"Weights\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"0.5, 0.5\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        top_k: int,\n        weights: str,\n        documents: List[Document],\n        retrievers: List[VectorStore],\n    ) -> BaseRetriever:\n        docs = [document.page_content for document in documents]\n        bm25_retriever = BM25Retriever.from_texts(docs)\n        bm25_retriever.k = top_k\n\n        _retrievers = [\n            _retriever.as_retriever(search_kwargs={\"k\": top_k})\n            for _retriever in retrievers\n        ]\n        _retrievers.append(bm25_retriever)\n\n        _weights = [\n            int(_weight) if isinstance(_weight, int) else float(_weight)\n            for _weight in weights.split(\",\")\n        ]\n\n        return EnsembleRetriever(retrievers=_retrievers, weights=_weights)\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"retrievers":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retrievers","display_name":"Retrievers","advanced":false,"dynamic":false,"info":"","type":"VectorStore","list":true},"top_k":{"required":true,"placeholder":"","show":true,"multiline":false,"value":2,"password":false,"name":"top_k","display_name":"Top K","advanced":false,"dynamic":false,"info":"The number of results to return.","type":"int","list":false},"weights":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"0.5, 0.5","password":false,"name":"weights","display_name":"Weights","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"The EnsembleRetriever takes a list of retrievers as input.","base_classes":["BaseRetriever"],"display_name":"Ensemble Retriever","custom_fields":{"documents":null,"retrievers":null,"top_k":null,"weights":null},"output_types":["EnsembleRetriever"],"documentation":"https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble","beta":false,"error":null},"id":"EnsembleRetriever-CbNZR"},"positionAbsolute":{"x":1279.144798256169,"y":939.2863844490112},"selected":false,"dragging":false},{"width":384,"height":427,"id":"HuggingFaceEmbeddingInferenceAPI-PaVk7","type":"genericNode","position":{"x":144.9517824752378,"y":274.25584108567},"data":{"type":"HuggingFaceEmbeddingInferenceAPI","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n\nclass HuggingFaceInferenceAPIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"HuggingFaceInferenceAPI Embeddings\"\n    description: str = \"\"\"Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.\"\"\"\n    documentation: str = (\n        \"https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"inference_api_key\": {\n                \"display_name\": \"Inference API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, inference_api_key: str, model_name: str) -> Embeddings:\n        return HuggingFaceInferenceAPIEmbeddings(\n            api_key=inference_api_key, model_name=model_name\n        )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","inference_api_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"inference_api_key","display_name":"Inference API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"model_name":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"thenlper/gte-large","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.","base_classes":["Embeddings"],"display_name":"HuggingFaceInferenceAPI Embeddings","custom_fields":{"inference_api_key":null,"model_name":null},"output_types":["HuggingFaceEmbeddingInferenceAPI"],"documentation":"https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub","beta":false,"error":null},"id":"HuggingFaceEmbeddingInferenceAPI-PaVk7"},"selected":false,"positionAbsolute":{"x":144.9517824752378,"y":274.25584108567},"dragging":false},{"width":384,"height":291,"id":"Chroma-3knxw","type":"genericNode","position":{"x":714.8560258772989,"y":716.0023227458767},"data":{"type":"Chroma","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chroma_server_cors_allow_origins":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_grpc_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_host":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_port","display_name":"Server Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_ssl_enabled":{"required":true,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"collection_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"genflow","password":false,"name":"collection_name","display_name":"Collection Name","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"documents":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"embedding":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","type":"Embeddings","list":false},"persist":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"persist","display_name":"Persist","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"persist_directory":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"/mnt/models/chroma","password":false,"name":"persist_directory","display_name":"Persist Directory","advanced":true,"dynamic":false,"info":"","type":"str","list":false}},"description":"Implementation of Vector Store using Chroma","base_classes":["VectorStore","BaseRetriever"],"display_name":"Chroma","custom_fields":{"chroma_server_cors_allow_origins":null,"chroma_server_grpc_port":null,"chroma_server_host":null,"chroma_server_port":null,"chroma_server_ssl_enabled":null,"collection_name":null,"documents":null,"embedding":null,"persist":null,"persist_directory":null},"output_types":["Chroma"],"documentation":"https://docs.aiplanet.com/components/vector-store#chroma","beta":true,"error":null},"id":"Chroma-3knxw"},"selected":false,"positionAbsolute":{"x":714.8560258772989,"y":716.0023227458767},"dragging":false},{"width":384,"height":547,"id":"AzureAIDocumentIntelligenceLoader-BKHs4","type":"genericNode","position":{"x":-274.3172694284365,"y":779.0501615675436},"data":{"type":"AzureAIDocumentIntelligenceLoader","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import List\nfrom genflow.interface.custom.custom_component import CustomComponent\nfrom langchain_community.document_loaders import AzureAIDocumentIntelligenceLoader\nfrom langchain.schema import Document\n\n\nclass AzureAIDocumentIntelligenceLoaderComponent(CustomComponent):\n    display_name: str = \"AzureAIDocumentIntelligenceLoader\"\n    description: str = \"Azure ai document intelligence Loader.\"\n    documentation: str = \"https://docs.aiplanet.com/components/document-loaders#azureai-document-intelligence-loader\"\n\n    def build_config(self):\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\"pdf\", \"jpeg\", \"png\", \"bmp\", \"tiff\"],\n                \"suffixes\": [\n                    \".pdf\",\n                    \".jpg\",\n                    \".jpeg\",\n                    \".png\",\n                    \".bmp\",\n                    \".dib\" \".tiff\",\n                    \".tif\",\n                ],\n                \"input_types\": [\"Input\"],\n            },\n            \"endpoint\": {\"display_name\": \"Endpoint\", \"required\": True},\n            \"key\": {\"display_name\": \"Key\", \"required\": True, \"password\": True},\n            \"api_model\": {\n                \"display_name\": \"API Model\",\n                \"required\": True,\n                \"value\": \"prebuilt-layout\",\n            },\n            \"code\": {\"show\": False},\n            \"file_size\": {\n                \"display_name\": \"File Size\",\n                \"required\": True,\n                \"advanced\": True,\n                \"field_type\": \"int\",\n                \"value\": 20,\n            },\n        }\n\n    def build(\n        self, file_path: str, endpoint: str, key: str, api_model: str, file_size: int\n    ) -> List[Document]:\n        loader = AzureAIDocumentIntelligenceLoader(\n            api_endpoint=endpoint, api_key=key, file_path=file_path, api_model=api_model\n        )\n        results = loader.load()\n        return results\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","api_model":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"prebuilt-layout","password":false,"name":"api_model","display_name":"API Model","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"endpoint":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"endpoint","display_name":"Endpoint","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":""},"file_path":{"required":true,"placeholder":"","show":true,"multiline":false,"suffixes":[".pdf",".jpg",".jpeg",".png",".bmp",".dib.tiff",".tif"],"password":false,"name":"file_path","display_name":"File Path","advanced":false,"input_types":["Input"],"dynamic":false,"info":"","type":"file","list":false,"fileTypes":["pdf","jpeg","png","bmp","tiff"],"file_path":"/mnt/models/files/c8479b14-4113-46cf-bdba-4d54cf2cdb15/eede915e3696780006dc6343f2a508de1e7cdbd15aeb6d5466e4c6cf1ea09106.pdf","value":""},"file_size":{"required":true,"placeholder":"","show":true,"multiline":false,"value":20,"password":false,"name":"file_size","display_name":"File Size","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"key":{"required":true,"placeholder":"","show":true,"multiline":false,"password":true,"name":"key","display_name":"Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":""}},"description":"Azure ai document intelligence Loader.","base_classes":["Document"],"display_name":"AzureAIDocumentIntelligenceLoader","custom_fields":{"api_model":null,"endpoint":null,"file_path":null,"file_size":null,"key":null},"output_types":["AzureAIDocumentIntelligenceLoader"],"documentation":"https://docs.aiplanet.com/components/document-loaders#azureai-document-intelligence-loader","beta":true,"error":null},"id":"AzureAIDocumentIntelligenceLoader-BKHs4"},"positionAbsolute":{"x":-274.3172694284365,"y":779.0501615675436},"selected":false,"dragging":false},{"width":384,"height":457,"id":"Input-7P7hh","type":"genericNode","position":{"x":-720.7553245026618,"y":679.0633062465954},"data":{"type":"Input","node":{"template":{"input_value":{"required":false,"placeholder":"","show":true,"multiline":true,"value":"","password":false,"name":"input_value","display_name":"Input Value","advanced":false,"dynamic":false,"info":"","type":"file","list":false,"file_path":null},"input_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"file","password":false,"name":"input_key","display_name":"Input Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"input_type":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"File","password":false,"options":["File","Url","Text"],"name":"input_type","display_name":"Input Type","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"_type":"Input"},"description":"Input is used to specify the type of input.","base_classes":["Input"],"display_name":"Input","custom_fields":{},"output_types":["Input"],"documentation":"https://docs.aiplanet.com/components/inputs","beta":false,"error":null},"id":"Input-7P7hh"},"selected":false,"positionAbsolute":{"x":-720.7553245026618,"y":679.0633062465954},"dragging":false},{"width":384,"height":629,"id":"ChatOpenAI-e3gcH","type":"genericNode","position":{"x":683.3187967186356,"y":-77.33747879546488},"data":{"type":"ChatOpenAI","node":{"template":{"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"async_client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"async_client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"cache":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"cache","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"default_headers":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"default_headers","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"default_query":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"default_query","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"http_client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"http_client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"max_retries":{"required":false,"placeholder":"","show":false,"multiline":false,"value":2,"password":false,"name":"max_retries","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"max_tokens":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"max_tokens","advanced":false,"dynamic":false,"info":"","type":"int","list":false,"value":""},"metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"model_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"model_kwargs","advanced":true,"dynamic":false,"info":"","type":"dict","list":false},"model_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"gpt-3.5-turbo","password":false,"options":["gpt-4-1106-preview","gpt-4","gpt-4-32k","gpt-3.5-turbo","gpt-3.5-turbo-16k"],"name":"model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"n":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"n","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"openai_api_base":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n","type":"str","list":false},"openai_api_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_organization":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_proxy":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"request_timeout":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"request_timeout","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"streaming":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"streaming","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"tags":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"temperature":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"0.1","password":false,"name":"temperature","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"tiktoken_model_name":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tiktoken_model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"verbose","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"_type":"ChatOpenAI"},"description":"`OpenAI` Chat large language models API.","base_classes":["ChatOpenAI","BaseLanguageModel","BaseChatModel","BaseLLM"],"display_name":"ChatOpenAI","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/large-language-models#chatopenai","beta":false,"error":null},"id":"ChatOpenAI-e3gcH"},"selected":true,"positionAbsolute":{"x":683.3187967186356,"y":-77.33747879546488},"dragging":false}],"edges":[{"source":"CombineDocsChain-aEO5R","target":"RetrievalQA-8MZUd","sourceHandle":"{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-aEO5Rœ}","targetHandle":"{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8MZUdœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","id":"reactflow__edge-CombineDocsChain-aEO5R{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-aEO5Rœ}-RetrievalQA-8MZUd{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-8MZUdœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","data":{"targetHandle":{"fieldName":"combine_documents_chain","id":"RetrievalQA-8MZUd","inputTypes":null,"type":"BaseCombineDocumentsChain"},"sourceHandle":{"baseClasses":["BaseCombineDocumentsChain","Callable"],"dataType":"CombineDocsChain","id":"CombineDocsChain-aEO5R"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"RecursiveCharacterTextSplitter-V03ji","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ}","target":"EnsembleRetriever-CbNZR","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-CbNZRœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"EnsembleRetriever-CbNZR","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-V03ji"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-V03ji{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ}-EnsembleRetriever-CbNZR{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-CbNZRœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"EnsembleRetriever-CbNZR","sourceHandle":"{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-CbNZRœ}","target":"RetrievalQA-8MZUd","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8MZUdœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"RetrievalQA-8MZUd","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["BaseRetriever"],"dataType":"EnsembleRetriever","id":"EnsembleRetriever-CbNZR"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-EnsembleRetriever-CbNZR{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-CbNZRœ}-RetrievalQA-8MZUd{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-8MZUdœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"},{"source":"RecursiveCharacterTextSplitter-V03ji","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ}","target":"Chroma-3knxw","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œChroma-3knxwœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Chroma-3knxw","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-V03ji"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-V03ji{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ}-Chroma-3knxw{œfieldNameœ:œdocumentsœ,œidœ:œChroma-3knxwœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"HuggingFaceEmbeddingInferenceAPI-PaVk7","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-PaVk7œ}","target":"Chroma-3knxw","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-3knxwœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-3knxw","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings"],"dataType":"HuggingFaceEmbeddingInferenceAPI","id":"HuggingFaceEmbeddingInferenceAPI-PaVk7"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-HuggingFaceEmbeddingInferenceAPI-PaVk7{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-PaVk7œ}-Chroma-3knxw{œfieldNameœ:œembeddingœ,œidœ:œChroma-3knxwœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"Chroma-3knxw","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-3knxwœ}","target":"EnsembleRetriever-CbNZR","targetHandle":"{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-CbNZRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}","data":{"targetHandle":{"fieldName":"retrievers","id":"EnsembleRetriever-CbNZR","inputTypes":null,"type":"VectorStore"},"sourceHandle":{"baseClasses":["VectorStore","BaseRetriever"],"dataType":"Chroma","id":"Chroma-3knxw"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Chroma-3knxw{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-3knxwœ}-EnsembleRetriever-CbNZR{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-CbNZRœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"},{"source":"AzureAIDocumentIntelligenceLoader-BKHs4","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œAzureAIDocumentIntelligenceLoaderœ,œidœ:œAzureAIDocumentIntelligenceLoader-BKHs4œ}","target":"RecursiveCharacterTextSplitter-V03ji","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"RecursiveCharacterTextSplitter-V03ji","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"AzureAIDocumentIntelligenceLoader","id":"AzureAIDocumentIntelligenceLoader-BKHs4"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-AzureAIDocumentIntelligenceLoader-BKHs4{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œAzureAIDocumentIntelligenceLoaderœ,œidœ:œAzureAIDocumentIntelligenceLoader-BKHs4œ}-RecursiveCharacterTextSplitter-V03ji{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-V03jiœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"Input-7P7hh","sourceHandle":"{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-7P7hhœ}","target":"AzureAIDocumentIntelligenceLoader-BKHs4","targetHandle":"{œfieldNameœ:œfile_pathœ,œidœ:œAzureAIDocumentIntelligenceLoader-BKHs4œ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}","data":{"targetHandle":{"fieldName":"file_path","id":"AzureAIDocumentIntelligenceLoader-BKHs4","inputTypes":["Input"],"type":"file"},"sourceHandle":{"baseClasses":["Input"],"dataType":"Input","id":"Input-7P7hh"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Input-7P7hh{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-7P7hhœ}-AzureAIDocumentIntelligenceLoader-BKHs4{œfieldNameœ:œfile_pathœ,œidœ:œAzureAIDocumentIntelligenceLoader-BKHs4œ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}"},{"source":"ChatOpenAI-e3gcH","sourceHandle":"{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-e3gcHœ}","target":"CombineDocsChain-aEO5R","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-aEO5Rœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"CombineDocsChain-aEO5R","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["ChatOpenAI","BaseLanguageModel","BaseChatModel","BaseLLM"],"dataType":"ChatOpenAI","id":"ChatOpenAI-e3gcH"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-ChatOpenAI-e3gcH{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-e3gcHœ}-CombineDocsChain-aEO5R{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-aEO5Rœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"}],"viewport":{"x":335.49262559342753,"y":140.6957553011215,"zoom":0.5378271111103327}},"description":"Chat with Scanned documents","name":"OCR Scanned Chat","flow_type":"chat"}