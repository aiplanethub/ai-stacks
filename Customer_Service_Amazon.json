{
  "id": "58f074d7-502a-4221-9db5-8d80c6a17da0",
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 407,
        "id": "HuggingFaceEmbeddingInferenceAPI-YUSL9",
        "type": "genericNode",
        "position": { "x": 925.143447151384, "y": 1628.7868266868984 },
        "data": {
          "type": "HuggingFaceEmbeddingInferenceAPI",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n\nclass HuggingFaceInferenceAPIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"HuggingFaceInferenceAPI Embeddings\"\n    description: str = \"\"\"Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.\"\"\"\n    documentation: str = (\n        \"https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"inference_api_key\": {\n                \"display_name\": \"Inference API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, inference_api_key: str, model_name: str) -> Embeddings:\n        return HuggingFaceInferenceAPIEmbeddings(\n            api_key=inference_api_key, model_name=model_name\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "inference_api_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "inference_api_key",
                "display_name": "Inference API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "model_name": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "baai/bge-large-en-v1.5",
                "password": false,
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.",
            "base_classes": ["Embeddings"],
            "display_name": "HuggingFaceInferenceAPI Embeddings",
            "custom_fields": { "inference_api_key": null, "model_name": null },
            "output_types": ["HuggingFaceEmbeddingInferenceAPI"],
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub",
            "beta": false,
            "error": null
          },
          "id": "HuggingFaceEmbeddingInferenceAPI-YUSL9"
        },
        "selected": false,
        "positionAbsolute": { "x": 925.143447151384, "y": 1628.7868266868984 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 339,
        "id": "RetrievalQA-uZGDo",
        "type": "genericNode",
        "position": { "x": 2483.027468692956, "y": 731.4696591650967 },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "callbacks": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain.callbacks.base.BaseCallbackHandler",
                "list": true
              },
              "combine_documents_chain": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "combine_documents_chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseCombineDocumentsChain",
                "list": false
              },
              "memory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseMemory",
                "list": false
              },
              "retriever": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseRetriever",
                "list": false
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "query",
                "password": false,
                "name": "input_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "output_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "result",
                "password": false,
                "name": "output_key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "return_source_documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "return_source_documents",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "tags": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "verbose": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "RetrievalQA"
            },
            "description": "Chain for question-answering against an index.",
            "base_classes": [
              "RetrievalQA",
              "BaseRetrievalQA",
              "Chain",
              "Callable"
            ],
            "display_name": "RetrievalQA",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/chains#retrievalqa-chain",
            "beta": false,
            "error": null
          },
          "id": "RetrievalQA-uZGDo"
        },
        "selected": false,
        "positionAbsolute": { "x": 2483.027468692956, "y": 731.4696591650967 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 291,
        "id": "Chroma-1Udh8",
        "type": "genericNode",
        "position": { "x": 1483.71935766892, "y": 934.9578027405556 },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chroma_server_cors_allow_origins": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_grpc_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_host": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_ssl_enabled": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "collection_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Document",
                "list": true
              },
              "embedding": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Embeddings",
                "list": false
              },
              "persist": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "persist_directory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "/mnt/models/chroma",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": ["VectorStore", "BaseRetriever"],
            "display_name": "Chroma",
            "custom_fields": {
              "chroma_server_cors_allow_origins": null,
              "chroma_server_grpc_port": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_ssl_enabled": null,
              "collection_name": null,
              "documents": null,
              "embedding": null,
              "persist": null,
              "persist_directory": null
            },
            "output_types": ["Chroma"],
            "documentation": "https://docs.aiplanet.com/components/vector-store#chroma",
            "beta": true,
            "error": null
          },
          "id": "Chroma-1Udh8"
        },
        "selected": false,
        "positionAbsolute": { "x": 1483.71935766892, "y": 934.9578027405556 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 577,
        "id": "ConversationBufferMemory-uA6db",
        "type": "genericNode",
        "position": { "x": 1870.609464658182, "y": 330.9594496855062 },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "chat_memory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseChatMessageHistory",
                "list": false
              },
              "ai_prefix": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": "AI",
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "human_prefix": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": "Human",
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "query",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "type": "str",
                "list": false
              },
              "memory_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "output_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "type": "str",
                "list": false
              },
              "return_messages": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ConversationBufferMemory"
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/memories#conversationbuffermemory",
            "beta": false,
            "error": null
          },
          "id": "ConversationBufferMemory-uA6db"
        },
        "positionAbsolute": { "x": 1870.609464658182, "y": 330.9594496855062 },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 333,
        "id": "CombineDocsChain-mt99J",
        "type": "genericNode",
        "position": { "x": 1906.81351757829, "y": -116.73339474844951 },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseLanguageModel",
                "list": false
              },
              "chain_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": ["stuff", "map_reduce", "map_rerank", "refine"],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": ["BaseCombineDocumentsChain", "Callable"],
            "display_name": "CombineDocsChain",
            "custom_fields": {},
            "output_types": [],
            "documentation": "",
            "beta": false,
            "error": null
          },
          "id": "CombineDocsChain-mt99J"
        },
        "selected": false,
        "positionAbsolute": { "x": 1906.81351757829, "y": -116.73339474844951 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 735,
        "id": "AzureChatOpenAI-cSgtD",
        "type": "genericNode",
        "position": { "x": 1354.7763756013028, "y": -463.2676590551715 },
        "data": {
          "type": "AzureChatOpenAI",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow.interface.custom import CustomComponent\nfrom langchain.llms.base import BaseLLM\nfrom langchain.chat_models import AzureChatOpenAI\n\n\nclass AzureChatOpenAILLM(CustomComponent):\n    display_name: str = \"AzureChatOpenAI\"\n    description: str = \"Azure Chat Open AI Chat&Completion large language models.\"\n    documentation: str = \"https://docs.aiplanet.com/components/large-language-models#azurechatopenai\"\n    \n    AZURE_OPENAI_MODELS = [\n        \"gpt-4\",\n        \"gpt-4-32k\",\n        \"gpt-4-vision\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"gpt-4\",\n                \"options\": self.AZURE_OPENAI_MODELS,\n                \"required\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"AzureChatOpenAI API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"api_base\": {\n                \"display_name\": \"AzureChatOpenAI API Base\",\n                \"required\": True,\n            },\n            \"api_type\": {\"display_name\": \"AzureChatOpenAI API Type\", \"required\": True},\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"value\": \"2023-07-01-preview\",\n                \"required\": True,\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.5,\n                \"field_type\": \"float\",\n                \"required\": False,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"value\": 512,\n                \"required\": False,\n                \"field_type\": \"int\",\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str,\n        api_base: str,\n        api_type: str,\n        api_key: str,\n        azure_deployment: str,\n        api_version: str = \"2023-05-15\",\n        temperature: Optional[float] = 0.7,\n        max_tokens: Optional[int] = 512,\n    ) -> BaseLLM:\n        try:\n            output = AzureChatOpenAI(\n                model_name=model,\n                openai_api_base=api_base,\n                openai_api_type=api_type,\n                openai_api_key=api_key,\n                openai_api_version=api_version,\n                deployment_name=azure_deployment,\n                temperature=temperature,\n                max_tokens=max_tokens,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Azure ChatOpenAI model.\") from e\n        return output\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "api_base": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "api_base",
                "display_name": "AzureChatOpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "api_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "api_key",
                "display_name": "AzureChatOpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "api_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "api_type",
                "display_name": "AzureChatOpenAI API Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "api_version": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "2023-07-01-preview",
                "password": false,
                "name": "api_version",
                "display_name": "API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "azure_deployment": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "azure_deployment",
                "display_name": "Deployment Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "max_tokens": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 512,
                "password": false,
                "name": "max_tokens",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "model": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "gpt-4",
                "password": false,
                "options": ["gpt-4", "gpt-4-32k", "gpt-4-vision"],
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "temperature": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 0.5,
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              }
            },
            "description": "Azure Chat Open AI Chat&Completion large language models.",
            "base_classes": ["BaseLLM", "BaseLanguageModel"],
            "display_name": "AzureChatOpenAI",
            "custom_fields": {
              "api_base": null,
              "api_key": null,
              "api_type": null,
              "api_version": null,
              "azure_deployment": null,
              "max_tokens": null,
              "model": null,
              "temperature": null
            },
            "output_types": ["AzureChatOpenAI"],
            "documentation": "https://docs.aiplanet.com/components/large-language-models#azurechatopenai",
            "beta": true,
            "error": null
          },
          "id": "AzureChatOpenAI-cSgtD"
        },
        "positionAbsolute": {
          "x": 1354.7763756013028,
          "y": -463.2676590551715
        },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-9DWkd",
        "type": "genericNode",
        "position": { "x": 746.3266789697328, "y": -44.20296733541467 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-9DWkd"
        },
        "selected": false,
        "positionAbsolute": { "x": 746.3266789697328, "y": -44.20296733541467 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 395,
        "id": "WebBaseLoader-D6ptT",
        "type": "genericNode",
        "position": { "x": -55.53749076326335, "y": -159.04281073938648 },
        "data": {
          "type": "WebBaseLoader",
          "node": {
            "template": {
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "source": "packaging" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "web_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "web_path",
                "display_name": "Web Page",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "WebBaseLoader"
            },
            "description": "Load HTML pages using `urllib` and parse them with `BeautifulSoup'.",
            "base_classes": ["Document"],
            "display_name": "WebBaseLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://docs.aiplanet.com/components/document-loaders#webbaseloader",
            "beta": false,
            "error": null
          },
          "id": "WebBaseLoader-D6ptT"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -55.53749076326335,
          "y": -159.04281073938648
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 457,
        "id": "Input-9Jjsn",
        "type": "genericNode",
        "position": { "x": -520.9410666635702, "y": -279.92685642777786 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "https://www.amazon.in/gp/help/customer/display.html?nodeId=GMD974XRCEEJJDQJ",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "file_path": null
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "packaging_url",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Url",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-9Jjsn"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -520.9410666635702,
          "y": -279.92685642777786
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 395,
        "id": "WebBaseLoader-GXJb4",
        "type": "genericNode",
        "position": { "x": -25.545002421363392, "y": 292.3711107479852 },
        "data": {
          "type": "WebBaseLoader",
          "node": {
            "template": {
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "source": "free-shipping" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "web_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "web_path",
                "display_name": "Web Page",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "WebBaseLoader"
            },
            "description": "Load HTML pages using `urllib` and parse them with `BeautifulSoup'.",
            "base_classes": ["Document"],
            "display_name": "WebBaseLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://docs.aiplanet.com/components/document-loaders#webbaseloader",
            "beta": false,
            "error": null
          },
          "id": "WebBaseLoader-GXJb4"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -25.545002421363392,
          "y": 292.3711107479852
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 457,
        "id": "Input-aDEDq",
        "type": "genericNode",
        "position": { "x": -592.2045123734669, "y": 261.32048864550035 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "https://www.amazon.in/gp/help/customer/display.html?ref_=hp_left_v4_sib&nodeId=GETBNKYH8CDWD8YU",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "file_path": null
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "free_shipping_url",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Url",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-aDEDq"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -592.2045123734669,
          "y": 261.32048864550035
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 395,
        "id": "WebBaseLoader-t5BQV",
        "type": "genericNode",
        "position": { "x": -52.49640186756102, "y": 766.8278040277207 },
        "data": {
          "type": "WebBaseLoader",
          "node": {
            "template": {
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "source": "faqs" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "web_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "web_path",
                "display_name": "Web Page",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "WebBaseLoader"
            },
            "description": "Load HTML pages using `urllib` and parse them with `BeautifulSoup'.",
            "base_classes": ["Document"],
            "display_name": "WebBaseLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://docs.aiplanet.com/components/document-loaders#webbaseloader",
            "beta": false,
            "error": null
          },
          "id": "WebBaseLoader-t5BQV"
        },
        "selected": false,
        "positionAbsolute": { "x": -52.49640186756102, "y": 766.8278040277207 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 457,
        "id": "Input-6cDBO",
        "type": "genericNode",
        "position": { "x": -578.594523455188, "y": 743.9477224840327 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "https://www.amazon.in/gp/help/customer/display.html?nodeId=G202115040#GUID-2AF6C743-32BB-453A-9322-99B23126B99D__SECTION_D3328A1BAC5B473EA9A51FEBE8202BF9",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "file_path": null
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "faqs_url",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Url",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-6cDBO"
        },
        "selected": false,
        "positionAbsolute": { "x": -578.594523455188, "y": 743.9477224840327 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-2qVkT",
        "type": "genericNode",
        "position": { "x": 616.9212114049174, "y": 507.12451283125336 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-2qVkT"
        },
        "selected": false,
        "positionAbsolute": { "x": 616.9212114049174, "y": 507.12451283125336 },
        "dragging": false
      },
      {
        "width": 384,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-EF7Ut",
        "type": "genericNode",
        "position": { "x": 630.4058193382045, "y": 1020.7850930617734 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-EF7Ut"
        },
        "selected": false,
        "positionAbsolute": { "x": 630.4058193382045, "y": 1020.7850930617734 },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Chroma-1Udh8",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1Udh8œ}",
        "target": "RetrievalQA-uZGDo",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-uZGDo",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": ["VectorStore", "BaseRetriever"],
            "dataType": "Chroma",
            "id": "Chroma-1Udh8"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-1Udh8{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-1Udh8œ}-RetrievalQA-uZGDo{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "HuggingFaceEmbeddingInferenceAPI-YUSL9",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-YUSL9œ}",
        "target": "Chroma-1Udh8",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-1Udh8",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": ["Embeddings"],
            "dataType": "HuggingFaceEmbeddingInferenceAPI",
            "id": "HuggingFaceEmbeddingInferenceAPI-YUSL9"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HuggingFaceEmbeddingInferenceAPI-YUSL9{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-YUSL9œ}-Chroma-1Udh8{œfieldNameœ:œembeddingœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "CombineDocsChain-mt99J",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-mt99Jœ}",
        "target": "RetrievalQA-uZGDo",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQA-uZGDo",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": ["BaseCombineDocumentsChain", "Callable"],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-mt99J"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-mt99J{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-mt99Jœ}-RetrievalQA-uZGDo{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
      },
      {
        "source": "AzureChatOpenAI-cSgtD",
        "sourceHandle": "{œbaseClassesœ:[œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-cSgtDœ}",
        "target": "CombineDocsChain-mt99J",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-mt99Jœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-mt99J",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": ["BaseLLM", "BaseLanguageModel"],
            "dataType": "AzureChatOpenAI",
            "id": "AzureChatOpenAI-cSgtD"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-AzureChatOpenAI-cSgtD{œbaseClassesœ:[œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-cSgtDœ}-CombineDocsChain-mt99J{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-mt99Jœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-9DWkd",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-9DWkdœ}",
        "target": "Chroma-1Udh8",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-1Udh8",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-9DWkd"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-9DWkd{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-9DWkdœ}-Chroma-1Udh8{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "WebBaseLoader-D6ptT",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-D6ptTœ}",
        "target": "RecursiveCharacterTextSplitter-9DWkd",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-9DWkdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-9DWkd",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "WebBaseLoader",
            "id": "WebBaseLoader-D6ptT"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-WebBaseLoader-D6ptT{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-D6ptTœ}-RecursiveCharacterTextSplitter-9DWkd{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-9DWkdœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Input-9Jjsn",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-9Jjsnœ}",
        "target": "WebBaseLoader-D6ptT",
        "targetHandle": "{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-D6ptTœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "web_path",
            "id": "WebBaseLoader-D6ptT",
            "inputTypes": ["Input"],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-9Jjsn"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-9Jjsn{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-9Jjsnœ}-WebBaseLoader-D6ptT{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-D6ptTœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Input-aDEDq",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-aDEDqœ}",
        "target": "WebBaseLoader-GXJb4",
        "targetHandle": "{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-GXJb4œ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "web_path",
            "id": "WebBaseLoader-GXJb4",
            "inputTypes": ["Input"],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-aDEDq"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-aDEDq{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-aDEDqœ}-WebBaseLoader-GXJb4{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-GXJb4œ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Input-6cDBO",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-6cDBOœ}",
        "target": "WebBaseLoader-t5BQV",
        "targetHandle": "{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-t5BQVœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "web_path",
            "id": "WebBaseLoader-t5BQV",
            "inputTypes": ["Input"],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-6cDBO"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-6cDBO{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-6cDBOœ}-WebBaseLoader-t5BQV{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-t5BQVœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"
      },
      {
        "source": "WebBaseLoader-GXJb4",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-GXJb4œ}",
        "target": "RecursiveCharacterTextSplitter-2qVkT",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-2qVkTœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-2qVkT",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "WebBaseLoader",
            "id": "WebBaseLoader-GXJb4"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-WebBaseLoader-GXJb4{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-GXJb4œ}-RecursiveCharacterTextSplitter-2qVkT{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-2qVkTœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "WebBaseLoader-t5BQV",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-t5BQVœ}",
        "target": "RecursiveCharacterTextSplitter-EF7Ut",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-EF7Utœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-EF7Ut",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "WebBaseLoader",
            "id": "WebBaseLoader-t5BQV"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-WebBaseLoader-t5BQV{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-t5BQVœ}-RecursiveCharacterTextSplitter-EF7Ut{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-EF7Utœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-EF7Ut",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-EF7Utœ}",
        "target": "Chroma-1Udh8",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-1Udh8",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-EF7Ut"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-EF7Ut{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-EF7Utœ}-Chroma-1Udh8{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-2qVkT",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-2qVkTœ}",
        "target": "Chroma-1Udh8",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-1Udh8",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-2qVkT"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-2qVkT{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-2qVkTœ}-Chroma-1Udh8{œfieldNameœ:œdocumentsœ,œidœ:œChroma-1Udh8œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "ConversationBufferMemory-uA6db",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-uA6dbœ}",
        "target": "RetrievalQA-uZGDo",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "RetrievalQA-uZGDo",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-uA6db"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-uA6db{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-uA6dbœ}-RetrievalQA-uZGDo{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-uZGDoœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      }
    ],
    "viewport": {
      "x": -399.86150748607656,
      "y": 386.8204018446727,
      "zoom": 0.9243382079761138
    }
  },
  "description": "Service bot on Amazon Return Items",
  "name": "Customer_Service_Amazon",
  "flow_type": "chat"
}
