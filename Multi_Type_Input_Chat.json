{
  "id": "63afbf45-9480-4d7f-829a-a9914662e7df",
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 630,
        "id": "ChatOpenAI-Rwkko",
        "type": "genericNode",
        "position": { "x": 756.0497510222895, "y": -660.4898555896108 },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "callbacks": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain.callbacks.base.BaseCallbackHandler",
                "list": true
              },
              "async_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "async_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "cache": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "cache",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "default_headers": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_headers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "default_query": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_query",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "http_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "http_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "max_retries": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 2,
                "password": false,
                "name": "max_retries",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "max_tokens": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "max_tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "value": ""
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_kwargs": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo",
                "password": false,
                "options": [
                  "gpt-4-1106-preview",
                  "gpt-4",
                  "gpt-4-32k",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k"
                ],
                "name": "model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "n": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 1,
                "password": false,
                "name": "n",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "openai_api_base": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n",
                "type": "str",
                "list": false,
                "value": ""
              },
              "openai_api_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_organization": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_proxy": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "request_timeout": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "request_timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "streaming": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "streaming",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "tags": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "temperature": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "0.3",
                "password": false,
                "name": "temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "tiktoken_model_name": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tiktoken_model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "verbose": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ChatOpenAI"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseChatModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://python.langchain.com/docs/modules/model_io/models/chat/integrations/openai",
            "beta": false,
            "error": null
          },
          "id": "ChatOpenAI-Rwkko"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": { "x": 756.0497510222895, "y": -660.4898555896108 },
        "measured": { "width": 384, "height": 630 }
      },
      {
        "width": 384,
        "height": 376,
        "id": "PyPDFLoader-8sXNj",
        "type": "genericNode",
        "position": { "x": -312.35583610591294, "y": -259.3514394203207 },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "suffixes": [".pdf"],
                "password": false,
                "name": "file_path",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "fileTypes": ["pdf"],
                "file_path": "/mnt/models/files/14e9e768-2b0b-4268-9ac9-1b9908d0c4a4/eede915e3696780006dc6343f2a508de1e7cdbd15aeb6d5466e4c6cf1ea09106.pdf"
              },
              "file_size": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 20,
                "password": false,
                "name": "file_size",
                "display_name": "Fize Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "": "" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": ["Document"],
            "display_name": "PyPDFLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "beta": false,
            "error": null
          },
          "id": "PyPDFLoader-8sXNj"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": {
          "x": -312.35583610591294,
          "y": -259.3514394203207
        },
        "measured": { "width": 384, "height": 376 }
      },
      {
        "width": 384,
        "height": 396,
        "id": "WebBaseLoader-DF6pj",
        "type": "genericNode",
        "position": { "x": -320.7330997956069, "y": 96.07662153835531 },
        "data": {
          "type": "WebBaseLoader",
          "node": {
            "template": {
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "": "" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "web_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "web_path",
                "display_name": "Web Page",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "WebBaseLoader"
            },
            "description": "Load HTML pages using `urllib` and parse them with `BeautifulSoup'.",
            "base_classes": ["Document"],
            "display_name": "WebBaseLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/web_base",
            "beta": false,
            "error": null
          },
          "id": "WebBaseLoader-DF6pj"
        },
        "positionAbsolute": { "x": -320.7330997956069, "y": 96.07662153835531 },
        "selected": false,
        "dragging": false,
        "measured": { "width": 384, "height": 396 }
      },
      {
        "width": 384,
        "height": 396,
        "id": "YoutubeLoader-dNvgd",
        "type": "genericNode",
        "position": { "x": -344.2232976982365, "y": 509.7090471475826 },
        "data": {
          "type": "YoutubeLoader",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import List\nfrom genflow import CustomComponent\nfrom langchain.document_loaders import YoutubeLoader\nfrom langchain.schema import Document\n\n\nclass YoutubeLoaderComponent(CustomComponent):\n    display_name: str = \"Youtube Loader\"\n    description: str = \"Downloads the YouTube transcripts and video information.\"\n    documentation: str = (\n        \"https://python.langchain.com/docs/integrations/providers/youtube\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"youtube_url\": {\n                \"display_name\": \"Video URL\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n                \"input_types\":[\"Input\"]\n            },\n            \"language\": {\n                \"display_name\": \"Language\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"en\",\n                \"info\": \"language code to extract transcript. please check subtitles/cc to know available transcripts.\",\n            },\n            \"code\": {\"show\": False},\n            # error : <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify\n            # failed: unable to get local issuer certificate (_ssl.c:1007)>\n            # \"add_video_info\": {\n            #     \"display_name\": \"Add Video Information\",\n            #     \"is_list\": False,\n            #     \"required\": False,\n            #     \"value\": False,\n            # },\n            # translation not working\n            # \"translation\": {\n            #     \"display_name\": \"Translation\",\n            #     \"is_list\": False,\n            #     \"required\": True,\n            #     \"value\": \"en\",\n            # },\n        }\n\n    def build(self, youtube_url: str, language: str) -> List[Document]:\n        loader_instance = YoutubeLoader.from_youtube_url(\n            youtube_url=youtube_url, add_video_info=False, language=language\n        )\n        return loader_instance.load()\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "language": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "en",
                "password": false,
                "name": "language",
                "display_name": "Language",
                "advanced": false,
                "dynamic": false,
                "info": "language code to extract transcript. please check subtitles/cc to know available transcripts.",
                "type": "str",
                "list": false
              },
              "youtube_url": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "youtube_url",
                "display_name": "Video URL",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Downloads the YouTube transcripts and video information.",
            "base_classes": ["Document"],
            "display_name": "Youtube Loader",
            "custom_fields": { "language": null, "youtube_url": null },
            "output_types": ["YoutubeLoader"],
            "documentation": "https://python.langchain.com/docs/integrations/providers/youtube",
            "beta": false,
            "error": null
          },
          "id": "YoutubeLoader-dNvgd"
        },
        "selected": false,
        "positionAbsolute": { "x": -344.2232976982365, "y": 509.7090471475826 },
        "dragging": false,
        "measured": { "width": 384, "height": 396 }
      },
      {
        "width": 384,
        "height": 502,
        "id": "RecursiveCharacterTextSplitter-oan0G",
        "type": "genericNode",
        "position": { "x": 262.162602181627, "y": -376.05275966017325 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-oan0G"
        },
        "selected": false,
        "positionAbsolute": { "x": 262.162602181627, "y": -376.05275966017325 },
        "dragging": false,
        "measured": { "width": 384, "height": 502 }
      },
      {
        "width": 384,
        "height": 458,
        "id": "Input-lPWh9",
        "type": "genericNode",
        "position": { "x": -858.9118803856481, "y": 19.456783074178645 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "file_path": null
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Website URL",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Url",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-lPWh9"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -858.9118803856481,
          "y": 19.456783074178645
        },
        "dragging": false,
        "measured": { "width": 384, "height": 458 }
      },
      {
        "width": 384,
        "height": 458,
        "id": "Input-Ia0cg",
        "type": "genericNode",
        "position": { "x": -847.7429559240031, "y": 549.1829146836267 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "file_path": null
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Youtube Video URL",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Url",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-Ia0cg"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": { "x": -847.7429559240031, "y": 549.1829146836267 },
        "measured": { "width": 384, "height": 458 }
      },
      {
        "width": 384,
        "height": 502,
        "id": "RecursiveCharacterTextSplitter-W1qks",
        "type": "genericNode",
        "position": { "x": 266.0369204795146, "y": 142.9770848381375 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-W1qks"
        },
        "selected": false,
        "positionAbsolute": { "x": 266.0369204795146, "y": 142.9770848381375 },
        "dragging": false,
        "measured": { "width": 384, "height": 502 }
      },
      {
        "width": 384,
        "height": 502,
        "id": "RecursiveCharacterTextSplitter-FtAYa",
        "type": "genericNode",
        "position": { "x": 263.8853892008089, "y": 682.7335541613759 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true,
                "value": ["10"]
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-FtAYa"
        },
        "selected": false,
        "positionAbsolute": { "x": 121.77782789667378, "y": 659.5997651118655 },
        "dragging": false,
        "measured": { "width": 384, "height": 502 }
      },
      {
        "width": 384,
        "height": 531,
        "id": "ConversationBufferMemory-LAiJa",
        "type": "genericNode",
        "position": { "x": 1312.1346125399853, "y": -791.9069707766968 },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom langchain.memory.chat_memory import BaseMemory, BaseChatMemory\nfrom langchain.memory.buffer import ConversationBufferMemory\nfrom langchain.memory.chat_message_histories.postgres import PostgresChatMessageHistory\n\nfrom genflow import CustomComponent\n\n\nclass ConversationBufferMemoryComponent(CustomComponent):\n    display_name: str = \"ConversationBufferMemory\"\n    description: str = \"Buffer for storing conversation memory.\"\n    documentation: str = (\n        \"https://docs.aiplanet.com/components/memories#conversationbuffermemory\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"input_key\": {\n                \"display_name\": \"Input Key\",\n                \"required\": False,\n                \"value\": \"\",\n                \"info\": \"The variable to be used as Chat Input when more than one variable is available.\",\n            },\n            \"memory_key\": {\n                \"display_name\": \"Memory Key\",\n                \"required\": False,\n                \"value\": \"history\",\n            },\n            \"output_key\": {\n                \"display_name\": \"Output Key\",\n                \"required\": False,\n                \"value\": \"\",\n                \"info\": \"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)\",\n            },\n            \"return_messages\": {\n                \"display_name\": \"Return Messages\",\n                \"field_type\": \"bool\",\n                \"required\": False,\n                \"value\": True,\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"required\": False,\n                \"advanced\": True,\n                \"value\": \"genflow_memory_db\",\n            },\n            \"connection_string\": {\n                \"display_name\": \"Connection String\",\n                \"required\": False,\n                \"advanced\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        input_key: Optional[str] = \"\",\n        memory_key: Optional[str] = \"history\",\n        output_key: Optional[str] = \"\",\n        return_messages: Optional[bool] = True,\n        session_id: Optional[str] = \"genflow_memory_db\",\n        connection_string: Optional[str] = \"\",\n    ) -> Union[BaseMemory, BaseChatMemory]:\n        chat_memory = PostgresChatMessageHistory(\n            session_id=session_id, connection_string=connection_string\n        )\n\n        keys = {}\n\n        if input_key and input_key != \"\":\n            keys[\"input_key\"] = input_key\n\n        if output_key and output_key != \"\":\n            keys[\"output_key\"] = output_key\n\n        return ConversationBufferMemory(\n            chat_memory=chat_memory,\n            memory_key=memory_key,\n            return_messages=return_messages,\n            **keys\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "connection_string": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "connection_string",
                "display_name": "Connection String",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "question",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "type": "str",
                "list": false
              },
              "memory_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "password": false,
                "name": "memory_key",
                "display_name": "Memory Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "output_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "answer",
                "password": false,
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "type": "str",
                "list": false
              },
              "return_messages": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "return_messages",
                "display_name": "Return Messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "session_id": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow_memory_db",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": ["BaseMemory", "BaseChatMemory", "BaseMemory"],
            "display_name": "ConversationBufferMemory",
            "custom_fields": {
              "connection_string": null,
              "input_key": null,
              "memory_key": null,
              "output_key": null,
              "return_messages": null,
              "session_id": null
            },
            "output_types": ["ConversationBufferMemory"],
            "documentation": "https://docs.aiplanet.com/components/memories#conversationbuffermemory",
            "beta": false,
            "error": null
          },
          "id": "ConversationBufferMemory-LAiJa"
        },
        "selected": false,
        "positionAbsolute": { "x": 1228.617126915348, "y": -750.1482279643783 },
        "dragging": false,
        "measured": { "width": 384, "height": 531 }
      },
      {
        "width": 384,
        "height": 458,
        "id": "Input-brfwu",
        "type": "genericNode",
        "position": { "x": -833.699949725084, "y": -496.4613163810564 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "i need about space and planets.pdf",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "file_path": "mnt/models/files/63afbf45-9480-4d7f-829a-a9914662e7df/f398c83a345d3fc029a1ada7ef1c63370d653a2fce4658c9b9f87f21e7512b74.pdf"
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "PDF File",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "File",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-brfwu"
        },
        "selected": false,
        "positionAbsolute": { "x": -833.699949725084, "y": -496.4613163810564 },
        "dragging": false,
        "measured": { "width": 384, "height": 458 }
      },
      {
        "id": "Weaviate-scd2O",
        "type": "genericNode",
        "position": { "x": 859.4498960277218, "y": 301.4479202878293 },
        "data": {
          "type": "Weaviate",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.weaviate import Weaviate\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.embeddings.base import Embeddings\nimport weaviate\n\n\nclass WeaviateComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Weaviate.\n    \"\"\"\n\n    display_name: str = \"Weaviate\"\n    description: str = \"Implementation of Vector Store using Weaviate\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#weaviate\"\n    beta: bool = True\n    version: str = \"1.1\"\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"url\": {\n                \"display_name\": \"Weaviate URL\",\n                \"advanced\": True,\n                \"required\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"API Key\",\n                \"required\": True,\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"index_name\": {\n                \"display_name\": \"Index Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"text_key\": {\n                \"display_name\": \"Text Key\",\n                \"value\": \"text\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"search_by_text\": {\n                \"display_name\": \"Search By Text\",\n                \"value\": False,\n                \"required\": False,\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        url: str,\n        index_name: Optional[str] = \"genflow\",\n        api_key: Optional[str] = None,\n        text_key: str = \"text\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        search_by_text: bool = False,\n    ) -> VectorStore:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - url (str): The URL of the Weaviate instance.\n        - index_name (str): The name of the index.\n        - api_key (Optional[str]): The API key for Weaviate.\n        - text_key (str): The key to use for text in Weaviate.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - search_by_text (bool): Whether to search by text or by vector.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        if api_key:\n            auth_config = weaviate.AuthApiKey(api_key=api_key)\n            client = weaviate.Client(url=url, auth_client_secret=auth_config)\n        else:\n            client = weaviate.Client(url=url)\n\n        if documents is not None and embedding is not None:\n            for doc in documents:\n                doc.metadata = {k: v for k, v in doc.metadata.items() if bool(k)}\n\n            return Weaviate.from_documents(\n                documents=documents,\n                embedding=embedding,\n                client=client,\n                index_name=index_name,\n                text_key=text_key,\n            )\n\n        if embedding is not None:\n            return Weaviate(\n                client=client,\n                index_name=index_name,\n                text_key=text_key,\n                embedding=embedding,\n                by_text=search_by_text,\n            )\n\n        return Weaviate(\n            client=client,\n            index_name=index_name,\n            text_key=text_key,\n            by_text=search_by_text,\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "url": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "url",
                "display_name": "Weaviate URL",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false
              },
              "index_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false
              },
              "api_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "api_key",
                "display_name": "API Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false,
                "value": ""
              },
              "text_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "text",
                "password": false,
                "name": "text_key",
                "display_name": "Text Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false
              },
              "embedding": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "Embeddings",
                "list": false
              },
              "documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "Document",
                "list": true
              },
              "search_by_text": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "search_by_text",
                "display_name": "Search By Text",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "bool",
                "list": false
              }
            },
            "description": "Implementation of Vector Store using Weaviate",
            "base_classes": ["VectorStore"],
            "display_name": "Weaviate",
            "custom_fields": {
              "url": null,
              "index_name": null,
              "api_key": null,
              "text_key": null,
              "embedding": null,
              "documents": null,
              "search_by_text": null
            },
            "output_types": ["Weaviate"],
            "documentation": "https://docs.aiplanet.com/components/vector-store#weaviate",
            "beta": true,
            "error": null,
            "version": "1.1"
          },
          "id": "Weaviate-scd2O"
        },
        "measured": { "width": 384, "height": 291 },
        "selected": false,
        "dragging": false
      },
      {
        "id": "VectorStoreRetriever-rM0xk",
        "type": "genericNode",
        "position": { "x": 1336.7723395860028, "y": 109.45829919656921 },
        "data": {
          "type": "VectorStoreRetriever",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from genflow import CustomComponent\nfrom genflow.field_typing import VectorStore, BaseRetriever\n\n\nclass VectorStoreRetrieverComponent(CustomComponent):\n    display_name: str = \"VectorStoreRetriever\"\n    description: str = \"VectorStore retriever\"\n    beta = False\n    version: str = \"1.0\"\n\n    def build_config(self):\n        return {\n            \"vector_store\": {\n                \"display_name\": \"VectorStore\",\n                \"field_type\": \"VectorStore\",\n            },\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"value\": \"similarity\",\n                \"options\": [\"similarity\", \"mmr\"],\n            },\n            \"search_kwargs\": {\n                \"display_name\": \"Search Kwargs\",\n                \"field_type\": \"dict\",\n                \"value\": [{\"k\": 4}],\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        search_type: str,\n        search_kwargs: dict,\n        vector_store: VectorStore,\n    ) -> BaseRetriever:\n        return vector_store.as_retriever(\n            search_type=search_type, search_kwargs=search_kwargs\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "search_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "similarity",
                "password": false,
                "options": ["similarity", "mmr"],
                "name": "search_type",
                "display_name": "Search Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": true
              },
              "search_kwargs": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "k": 4 }],
                "password": false,
                "name": "search_kwargs",
                "display_name": "Search Kwargs",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "dict",
                "list": false
              },
              "vector_store": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "vector_store",
                "display_name": "VectorStore",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "VectorStore",
                "list": false
              }
            },
            "description": "VectorStore retriever",
            "base_classes": ["BaseRetriever"],
            "display_name": "VectorStoreRetriever",
            "custom_fields": {
              "search_type": null,
              "search_kwargs": null,
              "vector_store": null
            },
            "output_types": ["VectorStoreRetriever"],
            "documentation": "",
            "beta": false,
            "error": null,
            "version": "1.0"
          },
          "id": "VectorStoreRetriever-rM0xk"
        },
        "measured": { "width": 384, "height": 419 },
        "selected": false,
        "dragging": false
      },
      {
        "id": "ConversationalRetrievalChain-M7cXU",
        "type": "genericNode",
        "position": { "x": 1957.246331898934, "y": -204.98673630844098 },
        "data": {
          "type": "ConversationalRetrievalChain",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union, Callable\nfrom genflow import CustomComponent\nfrom genflow.field_typing import (\n    BasePromptTemplate,\n    BaseLanguageModel,\n    BaseMemory,\n    Chain,\n    BaseRetriever,\n)\nfrom langchain.chains import ConversationalRetrievalChain\nfrom langchain.prompts import PromptTemplate\n\n\nclass ConversationalRetrievalChainComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a RetrievalQA using Prompt.\n    \"\"\"\n\n    display_name: str = \"ConversationalRetrievalChain\"\n    description: str = \"Implementation of ConversationalRetrievalChain: allows Memory, Custom Prompt, Retriever\"\n    documentation: str = (\n        \"https://docs.aiplanet.com/components/chains#conversationalretrievalchain\"\n    )\n    beta: bool = True\n    version: str = \"1.0\"\n\n    CHAIN_TYPE_OPTIONS = [\"stuff\", \"map_reduce\", \"refine\", \"map_rerank\"]\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"chain_type\": {\n                \"display\": \"chain_type\",\n                \"value\": \"stuff\",\n                \"options\": self.CHAIN_TYPE_OPTIONS,\n                \"required\": True,\n            },\n            \"llm\": {\"display_name\": \"LLM\", \"required\": True},\n            \"prompt\": {\"display_name\": \"Prompt\"},\n            \"memory\": {\"display_name\": \"Memory\"},\n            \"retriever\": {\"display_name\": \"Retriever\", \"required\": True},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        llm: BaseLanguageModel,\n        retriever: BaseRetriever,\n        prompt: Optional[BasePromptTemplate] = None,\n        chain_type: str = \"stuff\",\n        memory: BaseMemory = None,\n    ) -> Chain:\n        \"\"\"\n        Builds the RetrievalQA with prompt\n\n        Args:\n        - llm: Large Language Models\n        - chain_type: used to load a specific type of chain for question-answering\n        - chain_type_kwargs: chain keywords argument to pass prompt\n        - retriever: vector store to retrieve k relevant context information\n        - memory: memory to provide chat_history for object\n\n        Returns:\n        - Chain: The ConversationalRetrievalChain.from_llm\n        \"\"\"\n\n        DEFAULT_TEMPLATE = \"\"\"\n            Answer the question based on the chat history(delimited by <hs></hs>) and context(delimited by <ctx> </ctx>) below.\n            -----------\n            <ctx>\n            {context}\n            </ctx>\n            -----------\n            <hs>\n            {chat_history}\n            </hs>\n            -----------\n            Question: {question}\n            Answer:\n        \"\"\"\n\n        DEFAULT_PROMPT = PromptTemplate(\n            input_variables=[\"context\", \"question\", \"chat_history\"],\n            template=DEFAULT_TEMPLATE,\n        )\n\n        if prompt == None:\n            prompt = DEFAULT_PROMPT\n\n        return ConversationalRetrievalChain.from_llm(\n            llm=llm,\n            retriever=retriever,\n            chain_type=chain_type,\n            return_source_documents=True,\n            verbose=False,\n            combine_docs_chain_kwargs={\"prompt\": prompt},\n            memory=memory,\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "llm": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "BaseLanguageModel",
                "list": false
              },
              "retriever": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "BaseRetriever",
                "list": false
              },
              "prompt": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "BasePromptTemplate",
                "list": false
              },
              "chain_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": ["stuff", "map_reduce", "refine", "map_rerank"],
                "name": "chain_type",
                "display_name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": true
              },
              "memory": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "BaseMemory",
                "list": false
              }
            },
            "description": "Implementation of ConversationalRetrievalChain: allows Memory, Custom Prompt, Retriever",
            "base_classes": ["Chain"],
            "display_name": "ConversationalRetrievalChain",
            "custom_fields": {
              "llm": null,
              "retriever": null,
              "prompt": null,
              "chain_type": null,
              "memory": null
            },
            "output_types": ["ConversationalRetrievalChain"],
            "documentation": "https://docs.aiplanet.com/components/chains#conversationalretrievalchain",
            "beta": true,
            "error": null,
            "version": "1.0"
          },
          "id": "ConversationalRetrievalChain-M7cXU"
        },
        "measured": { "width": 384, "height": 497 },
        "selected": false,
        "dragging": false
      },
      {
        "id": "HuggingFaceEmbeddingInferenceAPI-Cyvqv",
        "type": "genericNode",
        "position": { "x": 264.2299487247578, "y": 1228.3396529180802 },
        "data": {
          "type": "HuggingFaceEmbeddingInferenceAPI",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n\nclass HuggingFaceInferenceAPIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"HuggingFaceInferenceAPI Embeddings\"\n    description: str = \"\"\"Access HuggingFaceEmbedding model via inference api,download models locally.\"\"\"\n    documentation: str = \"https://docs.aiplanet.com/components/embeddings#huggingface-inference-api-embeddings\"\n    beta = False\n    version: str = \"1.0\"\n\n    def build_config(self):\n        return {\n            \"inference_api_key\": {\n                \"display_name\": \"Inference API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n                \"password\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, inference_api_key: str, model_name: str) -> Embeddings:\n        return HuggingFaceInferenceAPIEmbeddings(\n            api_key=inference_api_key, model_name=model_name\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "inference_api_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": true,
                "name": "inference_api_key",
                "display_name": "Inference API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false
              },
              "model_name": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "BAAI/bge-small-en-v1.5",
                "password": false,
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "use_default": false,
                "type": "str",
                "list": false
              }
            },
            "description": "Access HuggingFaceEmbedding model via inference api,download models locally.",
            "base_classes": ["Embeddings"],
            "display_name": "HuggingFaceInferenceAPI Embeddings",
            "custom_fields": { "inference_api_key": null, "model_name": null },
            "output_types": ["HuggingFaceEmbeddingInferenceAPI"],
            "documentation": "https://docs.aiplanet.com/components/embeddings#huggingface-inference-api-embeddings",
            "beta": false,
            "error": null,
            "version": "1.0"
          },
          "id": "HuggingFaceEmbeddingInferenceAPI-Cyvqv"
        },
        "measured": { "width": 384, "height": 403 },
        "selected": true,
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Input-lPWh9",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-lPWh9œ}",
        "target": "WebBaseLoader-DF6pj",
        "targetHandle": "{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-DF6pjœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "web_path",
            "id": "WebBaseLoader-DF6pj",
            "inputTypes": ["Input"],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-lPWh9"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-lPWh9{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-lPWh9œ}-WebBaseLoader-DF6pj{œfieldNameœ:œweb_pathœ,œidœ:œWebBaseLoader-DF6pjœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"
      },
      {
        "source": "Input-Ia0cg",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-Ia0cgœ}",
        "target": "YoutubeLoader-dNvgd",
        "targetHandle": "{œfieldNameœ:œyoutube_urlœ,œidœ:œYoutubeLoader-dNvgdœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "youtube_url",
            "id": "YoutubeLoader-dNvgd",
            "inputTypes": ["Input"],
            "type": "str"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-Ia0cg"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-Ia0cg{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-Ia0cgœ}-YoutubeLoader-dNvgd{œfieldNameœ:œyoutube_urlœ,œidœ:œYoutubeLoader-dNvgdœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"
      },
      {
        "source": "YoutubeLoader-dNvgd",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œYoutubeLoaderœ,œidœ:œYoutubeLoader-dNvgdœ}",
        "target": "RecursiveCharacterTextSplitter-FtAYa",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-FtAYaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-FtAYa",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "YoutubeLoader",
            "id": "YoutubeLoader-dNvgd"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-YoutubeLoader-dNvgd{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œYoutubeLoaderœ,œidœ:œYoutubeLoader-dNvgdœ}-RecursiveCharacterTextSplitter-FtAYa{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-FtAYaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "WebBaseLoader-DF6pj",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-DF6pjœ}",
        "target": "RecursiveCharacterTextSplitter-W1qks",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-W1qksœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-W1qks",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "WebBaseLoader",
            "id": "WebBaseLoader-DF6pj"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-WebBaseLoader-DF6pj{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œWebBaseLoaderœ,œidœ:œWebBaseLoader-DF6pjœ}-RecursiveCharacterTextSplitter-W1qks{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-W1qksœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "PyPDFLoader-8sXNj",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-8sXNjœ}",
        "target": "RecursiveCharacterTextSplitter-oan0G",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-oan0Gœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-oan0G",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-8sXNj"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-8sXNj{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-8sXNjœ}-RecursiveCharacterTextSplitter-oan0G{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-oan0Gœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Input-brfwu",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-brfwuœ}",
        "target": "PyPDFLoader-8sXNj",
        "targetHandle": "{œfieldNameœ:œfile_pathœ,œidœ:œPyPDFLoader-8sXNjœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}",
        "data": {
          "targetHandle": {
            "fieldName": "file_path",
            "id": "PyPDFLoader-8sXNj",
            "inputTypes": ["Input"],
            "type": "file"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-brfwu"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-brfwu{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-brfwuœ}-PyPDFLoader-8sXNj{œfieldNameœ:œfile_pathœ,œidœ:œPyPDFLoader-8sXNjœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}"
      },
      {
        "source": "Weaviate-scd2O",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-scd2Oœ}",
        "target": "VectorStoreRetriever-rM0xk",
        "targetHandle": "{œfieldNameœ:œvector_storeœ,œidœ:œVectorStoreRetriever-rM0xkœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vector_store",
            "id": "VectorStoreRetriever-rM0xk",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": ["VectorStore"],
            "dataType": "Weaviate",
            "id": "Weaviate-scd2O"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__Weaviate-scd2O{œbaseClassesœ:[œVectorStoreœ],œdataTypeœ:œWeaviateœ,œidœ:œWeaviate-scd2Oœ}-VectorStoreRetriever-rM0xk{œfieldNameœ:œvector_storeœ,œidœ:œVectorStoreRetriever-rM0xkœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-W1qks",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-W1qksœ}",
        "target": "Weaviate-scd2O",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Weaviate-scd2O",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-W1qks"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__RecursiveCharacterTextSplitter-W1qks{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-W1qksœ}-Weaviate-scd2O{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-FtAYa",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-FtAYaœ}",
        "target": "Weaviate-scd2O",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Weaviate-scd2O",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-FtAYa"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__RecursiveCharacterTextSplitter-FtAYa{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-FtAYaœ}-Weaviate-scd2O{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-oan0G",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-oan0Gœ}",
        "target": "Weaviate-scd2O",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Weaviate-scd2O",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-oan0G"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__RecursiveCharacterTextSplitter-oan0G{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-oan0Gœ}-Weaviate-scd2O{œfieldNameœ:œdocumentsœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "ChatOpenAI-Rwkko",
        "sourceHandle": "{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Rwkkoœ}",
        "target": "ConversationalRetrievalChain-M7cXU",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ConversationalRetrievalChain-M7cXU",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseChatModel",
              "BaseLLM"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-Rwkko"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__ChatOpenAI-Rwkko{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Rwkkoœ}-ConversationalRetrievalChain-M7cXU{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "VectorStoreRetriever-rM0xk",
        "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-rM0xkœ}",
        "target": "ConversationalRetrievalChain-M7cXU",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "ConversationalRetrievalChain-M7cXU",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": ["BaseRetriever"],
            "dataType": "VectorStoreRetriever",
            "id": "VectorStoreRetriever-rM0xk"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__VectorStoreRetriever-rM0xk{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-rM0xkœ}-ConversationalRetrievalChain-M7cXU{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "ConversationBufferMemory-LAiJa",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-LAiJaœ}",
        "target": "ConversationalRetrievalChain-M7cXU",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "ConversationalRetrievalChain-M7cXU",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": ["BaseMemory", "BaseChatMemory", "BaseMemory"],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-LAiJa"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__ConversationBufferMemory-LAiJa{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-LAiJaœ}-ConversationalRetrievalChain-M7cXU{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-M7cXUœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "HuggingFaceEmbeddingInferenceAPI-Cyvqv",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-Cyvqvœ}",
        "target": "Weaviate-scd2O",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Weaviate-scd2O",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": ["Embeddings"],
            "dataType": "HuggingFaceEmbeddingInferenceAPI",
            "id": "HuggingFaceEmbeddingInferenceAPI-Cyvqv"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "xy-edge__HuggingFaceEmbeddingInferenceAPI-Cyvqv{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-Cyvqvœ}-Weaviate-scd2O{œfieldNameœ:œembeddingœ,œidœ:œWeaviate-scd2Oœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      }
    ],
    "viewport": {
      "x": 740.4877429545909,
      "y": 352.91639024742244,
      "zoom": 0.2651915786653675
    }
  },
  "description": "Chat with multiple types of inputs. Youtube, URL, PDF.",
  "name": "Multi Input Chat",
  "flow_type": "chat"
}
