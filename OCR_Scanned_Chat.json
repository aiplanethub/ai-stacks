{
  "id": "7dd3ecf4-8d28-4787-a2d9-4072eb650705",
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-Zk55A",
        "type": "genericNode",
        "position": {
          "x": 177.74123774779434,
          "y": 898.1899836356408
        },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "150",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "500",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true,
                "value": [
                  ""
                ]
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": [
              "Document"
            ],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": [
              "RecursiveCharacterTextSplitter"
            ],
            "documentation": "https://docs.genflow.org/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-Zk55A"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 177.74123774779434,
          "y": 898.1899836356408
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 427,
        "id": "HuggingFaceEmbeddingInferenceAPI-LRzFh",
        "type": "genericNode",
        "position": {
          "x": 144.9517824752378,
          "y": 274.25584108567
        },
        "data": {
          "type": "HuggingFaceEmbeddingInferenceAPI",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n\nclass HuggingFaceInferenceAPIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"HuggingFaceInferenceAPI Embeddings\"\n    description: str = \"\"\"Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.\"\"\"\n    documentation: str = (\n        \"https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"inference_api_key\": {\n                \"display_name\": \"Inference API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, inference_api_key: str, model_name: str) -> Embeddings:\n        return HuggingFaceInferenceAPIEmbeddings(\n            api_key=inference_api_key, model_name=model_name\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "inference_api_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "inference_api_key",
                "display_name": "Inference API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "model_name": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "BAAI/bge-small-en-v1.5",
                "password": false,
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Access HuggingFaceEmbedding model via inference api, \nwhich does not require to install sentence_transformers \nand download models locally.",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "HuggingFaceInferenceAPI Embeddings",
            "custom_fields": {
              "inference_api_key": null,
              "model_name": null
            },
            "output_types": [
              "HuggingFaceEmbeddingInferenceAPI"
            ],
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub",
            "beta": false,
            "error": null
          },
          "id": "HuggingFaceEmbeddingInferenceAPI-LRzFh"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 144.9517824752378,
          "y": 274.25584108567
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 291,
        "id": "Chroma-RhZmo",
        "type": "genericNode",
        "position": {
          "x": 1064.272935322748,
          "y": 1287.5918335728254
        },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chroma_server_cors_allow_origins": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_grpc_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_host": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_ssl_enabled": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "collection_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Document",
                "list": true
              },
              "embedding": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Embeddings",
                "list": false
              },
              "persist": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "persist_directory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "/mnt/models/chroma",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": [
              "VectorStore",
              "BaseRetriever"
            ],
            "display_name": "Chroma",
            "custom_fields": {
              "chroma_server_cors_allow_origins": null,
              "chroma_server_grpc_port": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_ssl_enabled": null,
              "collection_name": null,
              "documents": null,
              "embedding": null,
              "persist": null,
              "persist_directory": null
            },
            "output_types": [
              "Chroma"
            ],
            "documentation": "https://docs.aiplanet.com/components/vector-store#chroma",
            "beta": true,
            "error": null
          },
          "id": "Chroma-RhZmo"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1064.272935322748,
          "y": 1287.5918335728254
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 547,
        "id": "AzureAIDocumentIntelligenceLoader-0Xd3W",
        "type": "genericNode",
        "position": {
          "x": -274.3172694284365,
          "y": 779.0501615675436
        },
        "data": {
          "type": "AzureAIDocumentIntelligenceLoader",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import List\nfrom genflow.interface.custom.custom_component import CustomComponent\nfrom langchain_community.document_loaders import AzureAIDocumentIntelligenceLoader\nfrom langchain.schema import Document\n\n\nclass AzureAIDocumentIntelligenceLoaderComponent(CustomComponent):\n    display_name: str = \"AzureAIDocumentIntelligenceLoader\"\n    description: str = \"Azure ai document intelligence Loader.\"\n    documentation: str = \"https://docs.aiplanet.com/components/document-loaders#azureai-document-intelligence-loader\"\n\n    def build_config(self):\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\"pdf\", \"jpeg\", \"png\", \"bmp\", \"tiff\"],\n                \"suffixes\": [\n                    \".pdf\",\n                    \".jpg\",\n                    \".jpeg\",\n                    \".png\",\n                    \".bmp\",\n                    \".dib\" \".tiff\",\n                    \".tif\",\n                ],\n                \"input_types\": [\"Input\"],\n            },\n            \"endpoint\": {\"display_name\": \"Endpoint\", \"required\": True},\n            \"key\": {\"display_name\": \"Key\", \"required\": True, \"password\": True},\n            \"api_model\": {\n                \"display_name\": \"API Model\",\n                \"required\": True,\n                \"value\": \"prebuilt-layout\",\n            },\n            \"code\": {\"show\": False},\n            \"file_size\": {\n                \"display_name\": \"File Size\",\n                \"required\": True,\n                \"advanced\": True,\n                \"field_type\": \"int\",\n                \"value\": 20,\n            },\n        }\n\n    def build(\n        self, file_path: str, endpoint: str, key: str, api_model: str, file_size: int\n    ) -> List[Document]:\n        loader = AzureAIDocumentIntelligenceLoader(\n            api_endpoint=endpoint, api_key=key, file_path=file_path, api_model=api_model\n        )\n        results = loader.load()\n        return results\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "api_model": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "prebuilt-layout",
                "password": false,
                "name": "api_model",
                "display_name": "API Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "endpoint": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "endpoint",
                "display_name": "Endpoint",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "file_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "suffixes": [
                  ".pdf",
                  ".jpg",
                  ".jpeg",
                  ".png",
                  ".bmp",
                  ".dib.tiff",
                  ".tif"
                ],
                "password": false,
                "name": "file_path",
                "display_name": "File Path",
                "advanced": false,
                "input_types": [
                  "Input"
                ],
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "fileTypes": [
                  "pdf",
                  "jpeg",
                  "png",
                  "bmp",
                  "tiff"
                ],
                "file_path": "/mnt/models/files/c8479b14-4113-46cf-bdba-4d54cf2cdb15/eede915e3696780006dc6343f2a508de1e7cdbd15aeb6d5466e4c6cf1ea09106.pdf",
                "value": ""
              },
              "file_size": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 20,
                "password": false,
                "name": "file_size",
                "display_name": "File Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "key",
                "display_name": "Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              }
            },
            "description": "Azure ai document intelligence Loader.",
            "base_classes": [
              "Document"
            ],
            "display_name": "AzureAIDocumentIntelligenceLoader",
            "custom_fields": {
              "api_model": null,
              "endpoint": null,
              "file_path": null,
              "file_size": null,
              "key": null
            },
            "output_types": [
              "AzureAIDocumentIntelligenceLoader"
            ],
            "documentation": "https://docs.aiplanet.com/components/document-loaders#azureai-document-intelligence-loader",
            "beta": true,
            "error": null
          },
          "id": "AzureAIDocumentIntelligenceLoader-0Xd3W"
        },
        "positionAbsolute": {
          "x": -274.3172694284365,
          "y": 779.0501615675436
        },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 457,
        "id": "Input-Yn44m",
        "type": "genericNode",
        "position": {
          "x": -720.7553245026618,
          "y": 679.0633062465954
        },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "arya_chakraborty_1 _page_resume.pdf",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "file_path": "/mnt/models/files/7dd3ecf4-8d28-4787-a2d9-4072eb650705/2a4fcdacd18fddd08b005cace4706a2420dd358affa07475d1a67e33649a34da.pdf"
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "file",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "File",
                "password": false,
                "options": [
                  "File",
                  "Url",
                  "Text"
                ],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": [
              "Input"
            ],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": [
              "Input"
            ],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-Yn44m"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -720.7553245026618,
          "y": 679.0633062465954
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 629,
        "id": "ChatOpenAI-A1Sq5",
        "type": "genericNode",
        "position": {
          "x": 1150.693356384857,
          "y": -44.265356577704196
        },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "callbacks": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain.callbacks.base.BaseCallbackHandler",
                "list": true
              },
              "async_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "async_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "cache": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "cache",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "default_headers": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_headers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "default_query": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_query",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "http_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "http_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "max_retries": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 2,
                "password": false,
                "name": "max_retries",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "max_tokens": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "max_tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "value": ""
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_kwargs": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "gpt-3.5-turbo",
                "password": false,
                "options": [
                  "gpt-4-1106-preview",
                  "gpt-4",
                  "gpt-4-32k",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k"
                ],
                "name": "model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "n": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 1,
                "password": false,
                "name": "n",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "openai_api_base": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n",
                "type": "str",
                "list": false
              },
              "openai_api_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_organization": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_proxy": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "request_timeout": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "request_timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "streaming": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "streaming",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "tags": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "temperature": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "0.7",
                "password": false,
                "name": "temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "tiktoken_model_name": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tiktoken_model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "verbose": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ChatOpenAI"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseChatModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/large-language-models#chatopenai",
            "beta": false,
            "error": null
          },
          "id": "ChatOpenAI-A1Sq5"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1150.693356384857,
          "y": -44.265356577704196
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 497,
        "id": "ConversationalRetrievalChain-U6TiS",
        "type": "genericNode",
        "position": {
          "x": 2028.0615083931873,
          "y": 869.417261845608
        },
        "data": {
          "type": "ConversationalRetrievalChain",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union, Callable\nfrom genflow import CustomComponent\nfrom genflow.field_typing import (\n    BasePromptTemplate,\n    BaseLanguageModel,\n    BaseMemory,\n    Chain,\n    BaseRetriever,\n)\nfrom langchain.chains import ConversationalRetrievalChain\nfrom langchain.prompts import PromptTemplate\n\n\nclass ConversationalRetrievalChainComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a RetrievalQA using Prompt.\n    \"\"\"\n\n    display_name: str = \"ConversationalRetrievalChain\"\n    description: str = \"Implementation of ConversationalRetrievalChain: allows Memory, Custom Prompt, Retriever\"\n    documentation: str = \"https://docs.aiplanet.com/components/chains#conversationalretrievalchain\"\n    beta: bool = True\n    \n    CHAIN_TYPE_OPTIONS = [\n        'stuff','map_reduce','refine','map_rerank'\n    ]\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"chain_type\":{\"display\":\"chain_type\",\"value\":\"stuff\",\"options\":self.CHAIN_TYPE_OPTIONS,\"required\":True},\n            \"llm\":{\"display_name\":\"LLM\",\"required\":True},\n            \"prompt\":{\"display_name\":\"Prompt\"},\n            \"memory\":{\"display_name\":\"Memory\"},\n            \"retriever\":{\"display_name\":\"Retriever\",\"required\":True},\n            \"code\": {\"show\": False}, \n        }\n\n    def build(\n       self,\n       llm:BaseLanguageModel,\n       retriever: BaseRetriever,\n       prompt: Optional[BasePromptTemplate] = None,\n       chain_type:str = \"stuff\",\n       memory: BaseMemory = None,\n    ) -> Chain:\n        \"\"\"\n        Builds the RetrievalQA with prompt\n\n        Args:\n        - llm: Large Language Models\n        - chain_type: used to load a specific type of chain for question-answering\n        - chain_type_kwargs: chain keywords argument to pass prompt\n        - retriever: vector store to retrieve k relevant context information\n        - memory: memory to provide chat_history for object\n\n        Returns:\n        - Chain: The ConversationalRetrievalChain.from_llm\n        \"\"\"\n\n        DEFAULT_TEMPLATE = \"\"\"\n            Answer the question based on the chat history(delimited by <hs></hs>) and context(delimited by <ctx> </ctx>) below.\n            -----------\n            <ctx>\n            {context}\n            </ctx>\n            -----------\n            <hs>\n            {chat_history}\n            </hs>\n            -----------\n            Question: {question}\n            Answer:\n        \"\"\"\n\n        DEFAULT_PROMPT = PromptTemplate(\n                input_variables=[\"context\", \"question\", \"chat_history\"],\n                template=DEFAULT_TEMPLATE\n            )\n        \n        if prompt==None:\n            prompt = DEFAULT_PROMPT\n\n        return ConversationalRetrievalChain.from_llm(\n                            llm=llm,\n                            retriever=retriever.as_retriever(), chain_type=chain_type,return_source_documents=True,\n                            verbose = False,\n                            combine_docs_chain_kwargs={'prompt': prompt},\n                            memory = memory,\n                        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chain_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": [
                  "stuff",
                  "map_reduce",
                  "refine",
                  "map_rerank"
                ],
                "name": "chain_type",
                "display_name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "llm": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseLanguageModel",
                "list": false
              },
              "memory": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseMemory",
                "list": false
              },
              "prompt": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BasePromptTemplate",
                "list": false
              },
              "retriever": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseRetriever",
                "list": false
              }
            },
            "description": "Implementation of ConversationalRetrievalChain: allows Memory, Custom Prompt, Retriever",
            "base_classes": [
              "Chain"
            ],
            "display_name": "ConversationalRetrievalChain",
            "custom_fields": {
              "chain_type": null,
              "llm": null,
              "memory": null,
              "prompt": null,
              "retriever": null
            },
            "output_types": [
              "ConversationalRetrievalChain"
            ],
            "documentation": "https://docs.aiplanet.com/components/chains#conversationalretrievalchain",
            "beta": true,
            "error": null
          },
          "id": "ConversationalRetrievalChain-U6TiS"
        },
        "positionAbsolute": {
          "x": 2028.0615083931873,
          "y": 869.417261845608
        }
      },
      {
        "width": 384,
        "height": 529,
        "id": "ConversationBufferMemory-fR3WF",
        "type": "genericNode",
        "position": {
          "x": 1300.139062016486,
          "y": 687.6045290444163
        },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom langchain.memory.chat_memory import BaseMemory, BaseChatMemory\nfrom langchain.memory.buffer import ConversationBufferMemory\nfrom langchain.memory.chat_message_histories.postgres import PostgresChatMessageHistory\n\nfrom genflow import CustomComponent\n\n\nclass ConversationBufferMemoryComponent(CustomComponent):\n    display_name: str = \"ConversationBufferMemory\"\n    description: str = \"Buffer for storing conversation memory.\"\n    documentation: str = (\n        \"https://docs.aiplanet.com/components/memories#conversationbuffermemory\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"input_key\": {\n                \"display_name\": \"Input Key\",\n                \"required\": False,\n                \"value\": \"\",\n                \"info\": \"The variable to be used as Chat Input when more than one variable is available.\",\n            },\n            \"memory_key\": {\n                \"display_name\": \"Memory Key\",\n                \"required\": False,\n                \"value\": \"history\",\n            },\n            \"output_key\": {\n                \"display_name\": \"Output Key\",\n                \"required\": False,\n                \"value\": \"\",\n                \"info\": \"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)\",\n            },\n            \"return_messages\": {\n                \"display_name\": \"Return Messages\",\n                \"field_type\": \"bool\",\n                \"required\": False,\n                \"value\": True,\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"required\": False,\n                \"advanced\": True,\n                \"value\": \"genflow_memory_db\",\n            },\n            \"connection_string\": {\n                \"display_name\": \"Connection String\",\n                \"required\": False,\n                \"advanced\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        input_key: Optional[str] = \"\",\n        memory_key: Optional[str] = \"history\",\n        output_key: Optional[str] = \"\",\n        return_messages: Optional[bool] = True,\n        session_id: Optional[str] = \"genflow_memory_db\",\n        connection_string: Optional[str] = \"\",\n    ) -> Union[BaseMemory, BaseChatMemory]:\n        chat_memory = PostgresChatMessageHistory(\n            session_id=session_id, connection_string=connection_string\n        )\n\n        keys = {}\n\n        if input_key and input_key != \"\":\n            keys[\"input_key\"] = input_key\n\n        if output_key and output_key != \"\":\n            keys[\"output_key\"] = output_key\n\n        return ConversationBufferMemory(\n            chat_memory=chat_memory,\n            memory_key=memory_key,\n            return_messages=return_messages,\n            **keys\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "connection_string": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "connection_string",
                "display_name": "Connection String",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "question",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "type": "str",
                "list": false
              },
              "memory_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "password": false,
                "name": "memory_key",
                "display_name": "Memory Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "output_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "answer",
                "password": false,
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "type": "str",
                "list": false
              },
              "return_messages": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "return_messages",
                "display_name": "Return Messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "session_id": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow_memory_db",
                "password": false,
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseMemory",
              "BaseChatMemory",
              "BaseMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "custom_fields": {
              "connection_string": null,
              "input_key": null,
              "memory_key": null,
              "output_key": null,
              "return_messages": null,
              "session_id": null
            },
            "output_types": [
              "ConversationBufferMemory"
            ],
            "documentation": "https://docs.aiplanet.com/components/memories#conversationbuffermemory",
            "beta": false,
            "error": null
          },
          "id": "ConversationBufferMemory-fR3WF"
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1300.139062016486,
          "y": 687.6045290444163
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "RecursiveCharacterTextSplitter-Zk55A",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-Zk55Aœ}",
        "target": "Chroma-RhZmo",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-RhZmoœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-RhZmo",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-Zk55A"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-Zk55A{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-Zk55Aœ}-Chroma-RhZmo{œfieldNameœ:œdocumentsœ,œidœ:œChroma-RhZmoœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "HuggingFaceEmbeddingInferenceAPI-LRzFh",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-LRzFhœ}",
        "target": "Chroma-RhZmo",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-RhZmoœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-RhZmo",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "HuggingFaceEmbeddingInferenceAPI",
            "id": "HuggingFaceEmbeddingInferenceAPI-LRzFh"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HuggingFaceEmbeddingInferenceAPI-LRzFh{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-LRzFhœ}-Chroma-RhZmo{œfieldNameœ:œembeddingœ,œidœ:œChroma-RhZmoœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "AzureAIDocumentIntelligenceLoader-0Xd3W",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œAzureAIDocumentIntelligenceLoaderœ,œidœ:œAzureAIDocumentIntelligenceLoader-0Xd3Wœ}",
        "target": "RecursiveCharacterTextSplitter-Zk55A",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-Zk55Aœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-Zk55A",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": [
              "Document"
            ],
            "dataType": "AzureAIDocumentIntelligenceLoader",
            "id": "AzureAIDocumentIntelligenceLoader-0Xd3W"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-AzureAIDocumentIntelligenceLoader-0Xd3W{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œAzureAIDocumentIntelligenceLoaderœ,œidœ:œAzureAIDocumentIntelligenceLoader-0Xd3Wœ}-RecursiveCharacterTextSplitter-Zk55A{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-Zk55Aœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Input-Yn44m",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-Yn44mœ}",
        "target": "AzureAIDocumentIntelligenceLoader-0Xd3W",
        "targetHandle": "{œfieldNameœ:œfile_pathœ,œidœ:œAzureAIDocumentIntelligenceLoader-0Xd3Wœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}",
        "data": {
          "targetHandle": {
            "fieldName": "file_path",
            "id": "AzureAIDocumentIntelligenceLoader-0Xd3W",
            "inputTypes": [
              "Input"
            ],
            "type": "file"
          },
          "sourceHandle": {
            "baseClasses": [
              "Input"
            ],
            "dataType": "Input",
            "id": "Input-Yn44m"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-Yn44m{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-Yn44mœ}-AzureAIDocumentIntelligenceLoader-0Xd3W{œfieldNameœ:œfile_pathœ,œidœ:œAzureAIDocumentIntelligenceLoader-0Xd3Wœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}"
      },
      {
        "source": "ChatOpenAI-A1Sq5",
        "sourceHandle": "{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-A1Sq5œ}",
        "target": "ConversationalRetrievalChain-U6TiS",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "ConversationalRetrievalChain-U6TiS",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseChatModel",
              "BaseLLM"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-A1Sq5"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-A1Sq5{œbaseClassesœ:[œChatOpenAIœ,œBaseLanguageModelœ,œBaseChatModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-A1Sq5œ}-ConversationalRetrievalChain-U6TiS{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "ConversationBufferMemory-fR3WF",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-fR3WFœ}",
        "target": "ConversationalRetrievalChain-U6TiS",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "ConversationalRetrievalChain-U6TiS",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "BaseChatMemory",
              "BaseMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-fR3WF"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-fR3WF{œbaseClassesœ:[œBaseMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-fR3WFœ}-ConversationalRetrievalChain-U6TiS{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "Chroma-RhZmo",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-RhZmoœ}",
        "target": "ConversationalRetrievalChain-U6TiS",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "ConversationalRetrievalChain-U6TiS",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": [
              "VectorStore",
              "BaseRetriever"
            ],
            "dataType": "Chroma",
            "id": "Chroma-RhZmo"
          }
        },
        "style": {
          "stroke": "#555"
        },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-RhZmo{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-RhZmoœ}-ConversationalRetrievalChain-U6TiS{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-U6TiSœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      }
    ],
    "viewport": {
      "x": 255.13454060927654,
      "y": 13.436036999541585,
      "zoom": 0.41268694702980435
    }
  },
  "description": "Using this workflow, you can interact with scanned documents. Simply input the Azure endpoint and API key, as well as the OpenAI API key, and you're ready to start chatting.",
  "name": "OCR Scanned Chat",
  "flow_type": "chat"
}