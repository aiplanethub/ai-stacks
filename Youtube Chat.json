{"id":"ecb8c751-2275-406b-9473-63b0e69de88d","data":{"nodes":[{"width":384,"height":395,"id":"YoutubeLoader-sdO8v","type":"genericNode","position":{"x":-1321.6288535444844,"y":81.1652309660272},"data":{"type":"YoutubeLoader","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import List\nfrom genflow import CustomComponent\nfrom langchain.document_loaders import YoutubeLoader\nfrom langchain.schema import Document\n\n\nclass YoutubeLoaderComponent(CustomComponent):\n    display_name: str = \"Youtube Loader\"\n    description: str = \"Downloads the YouTube transcripts and video information.\"\n    documentation: str = (\n        \"https://docs.aiplanet.com/components/document-loaders#youtubeloader\"\n    )\n    beta = False\n\n    def build_config(self):\n        return {\n            \"youtube_url\": {\n                \"display_name\": \"Video URL\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n                \"input_types\":[\"Input\"]\n            },\n            \"language\": {\n                \"display_name\": \"Language\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"en\",\n                \"info\": \"language code to extract transcript. please check subtitles/cc to know available transcripts.\",\n            },\n            \"code\": {\"show\": False},\n            # error : <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify\n            # failed: unable to get local issuer certificate (_ssl.c:1007)>\n            # \"add_video_info\": {\n            #     \"display_name\": \"Add Video Information\",\n            #     \"is_list\": False,\n            #     \"required\": False,\n            #     \"value\": False,\n            # },\n            # translation not working\n            # \"translation\": {\n            #     \"display_name\": \"Translation\",\n            #     \"is_list\": False,\n            #     \"required\": True,\n            #     \"value\": \"en\",\n            # },\n        }\n\n    def build(self, youtube_url: str, language: str) -> List[Document]:\n        loader_instance = YoutubeLoader.from_youtube_url(\n            youtube_url=youtube_url, add_video_info=False, language=language\n        )\n        return loader_instance.load()\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","language":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"en","password":false,"name":"language","display_name":"Language","advanced":false,"dynamic":false,"info":"language code to extract transcript. please check subtitles/cc to know available transcripts.","type":"str","list":false},"youtube_url":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"youtube_url","display_name":"Video URL","advanced":false,"input_types":["Input"],"dynamic":false,"info":"","type":"str","list":false}},"description":"Downloads the YouTube transcripts and video information.","base_classes":["Document"],"display_name":"Youtube Loader","custom_fields":{"language":null,"youtube_url":null},"output_types":["YoutubeLoader"],"documentation":"https://docs.aiplanet.com/components/document-loaders#youtubeloader","beta":false,"error":null},"id":"YoutubeLoader-sdO8v"},"positionAbsolute":{"x":-1321.6288535444844,"y":81.1652309660272},"selected":false,"dragging":false},{"width":384,"height":629,"id":"ChatOpenAI-runGt","type":"genericNode","position":{"x":603.8138715636295,"y":-1133.0383578329097},"data":{"type":"ChatOpenAI","node":{"template":{"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"async_client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"async_client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"cache":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"cache","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"default_headers":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"default_headers","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"default_query":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"default_query","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"http_client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"http_client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"max_retries":{"required":false,"placeholder":"","show":false,"multiline":false,"value":2,"password":false,"name":"max_retries","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"max_tokens":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"max_tokens","advanced":false,"dynamic":false,"info":"","type":"int","list":false,"value":""},"metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"model_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"model_kwargs","advanced":true,"dynamic":false,"info":"","type":"dict","list":false},"model_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"gpt-3.5-turbo","password":false,"options":["gpt-4-1106-preview","gpt-4","gpt-4-32k","gpt-3.5-turbo","gpt-3.5-turbo-16k"],"name":"model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"n":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"n","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"openai_api_base":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n","type":"str","list":false},"openai_api_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_organization":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_proxy":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"request_timeout":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"request_timeout","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"streaming":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"streaming","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"tags":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"temperature":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"0.5","password":false,"name":"temperature","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"tiktoken_model_name":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tiktoken_model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"verbose","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"_type":"ChatOpenAI"},"description":"`OpenAI` Chat large language models API.","base_classes":["BaseLanguageModel","BaseChatModel","ChatOpenAI","BaseLLM"],"display_name":"ChatOpenAI","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/large-language-models#chatopenai","beta":false,"error":null},"id":"ChatOpenAI-runGt"},"selected":false,"dragging":false,"positionAbsolute":{"x":603.8138715636295,"y":-1133.0383578329097}},{"width":384,"height":577,"id":"ConversationBufferMemory-7lETV","type":"genericNode","position":{"x":212.2636478036726,"y":-382.6884061613027},"data":{"type":"ConversationBufferMemory","node":{"template":{"chat_memory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chat_memory","advanced":false,"dynamic":false,"info":"","type":"BaseChatMessageHistory","list":false},"ai_prefix":{"required":false,"placeholder":"","show":false,"multiline":false,"value":"AI","password":false,"name":"ai_prefix","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"human_prefix":{"required":false,"placeholder":"","show":false,"multiline":false,"value":"Human","password":false,"name":"human_prefix","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"input_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"input_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Input when more than one variable is available.","type":"str","list":false},"memory_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"chat_history","password":false,"name":"memory_key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"output_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"output_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)","type":"str","list":false},"return_messages":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"return_messages","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"_type":"ConversationBufferMemory"},"description":"Buffer for storing conversation memory.","base_classes":["BaseChatMemory","ConversationBufferMemory","BaseMemory"],"display_name":"ConversationBufferMemory","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/memories#conversationbuffermemory","beta":false,"error":null},"id":"ConversationBufferMemory-7lETV"},"selected":false,"positionAbsolute":{"x":212.2636478036726,"y":-382.6884061613027},"dragging":false},{"width":384,"height":501,"id":"RecursiveCharacterTextSplitter-GmD6h","type":"genericNode","position":{"x":-815.3264417119707,"y":316.0278211554291},"data":{"type":"RecursiveCharacterTextSplitter","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chunk_overlap":{"required":false,"placeholder":"","show":true,"multiline":false,"value":200,"password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","type":"int","list":false},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":1000,"password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","type":"int","list":false},"documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","type":"Document","list":true},"separators":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","type":"str","list":true}},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","custom_fields":{"chunk_overlap":null,"chunk_size":null,"documents":null,"separators":null},"output_types":["RecursiveCharacterTextSplitter"],"documentation":"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter","beta":true,"error":null},"id":"RecursiveCharacterTextSplitter-GmD6h"},"selected":false,"positionAbsolute":{"x":-815.3264417119707,"y":316.0278211554291},"dragging":false},{"width":384,"height":387,"id":"HuggingFaceEmbeddingInferenceAPI-5IgOP","type":"genericNode","position":{"x":-778.4041619589489,"y":1127.7026043926903},"data":{"type":"HuggingFaceEmbeddingInferenceAPI","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n\nclass HuggingFaceInferenceAPIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"HuggingFaceInferenceAPI Embeddings\"\n    description: str = \"\"\"Access HuggingFaceEmbedding model via inference api,download models locally.\"\"\"\n    documentation: str = \"https://docs.aiplanet.com/components/embeddings#huggingface-inference-api-embeddings\"\n    beta = False\n\n    def build_config(self):\n        return {\n            \"inference_api_key\": {\n                \"display_name\": \"Inference API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(self, inference_api_key: str, model_name: str) -> Embeddings:\n        return HuggingFaceInferenceAPIEmbeddings(\n            api_key=inference_api_key, model_name=model_name\n        )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","inference_api_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"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","password":false,"name":"inference_api_key","display_name":"Inference API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"model_name":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"BAAI/bge-small-en-v1.5","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"Access HuggingFaceEmbedding model via inference api,download models locally.","base_classes":["Embeddings"],"display_name":"HuggingFaceInferenceAPI Embeddings","custom_fields":{"inference_api_key":null,"model_name":null},"output_types":["HuggingFaceEmbeddingInferenceAPI"],"documentation":"https://docs.aiplanet.com/components/embeddings#huggingface-inference-api-embeddings","beta":false,"error":null},"id":"HuggingFaceEmbeddingInferenceAPI-5IgOP"},"selected":false,"positionAbsolute":{"x":-778.4041619589489,"y":1127.7026043926903},"dragging":false},{"width":384,"height":291,"id":"Chroma-lIlqp","type":"genericNode","position":{"x":-153.8022628036648,"y":887.707785998049},"data":{"type":"Chroma","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chroma_server_cors_allow_origins":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_grpc_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_host":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_port","display_name":"Server Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_ssl_enabled":{"required":true,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"collection_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"genflow","password":false,"name":"collection_name","display_name":"Collection Name","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"documents":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"embedding":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","type":"Embeddings","list":false},"persist":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"persist","display_name":"Persist","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"persist_directory":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"/mnt/models/chroma","password":false,"name":"persist_directory","display_name":"Persist Directory","advanced":true,"dynamic":false,"info":"","type":"str","list":false}},"description":"Implementation of Vector Store using Chroma","base_classes":["VectorStore","BaseRetriever"],"display_name":"Chroma","custom_fields":{"chroma_server_cors_allow_origins":null,"chroma_server_grpc_port":null,"chroma_server_host":null,"chroma_server_port":null,"chroma_server_ssl_enabled":null,"collection_name":null,"documents":null,"embedding":null,"persist":null,"persist_directory":null},"output_types":["Chroma"],"documentation":"https://docs.aiplanet.com/components/vector-store#chroma","beta":true,"error":null},"id":"Chroma-lIlqp"},"positionAbsolute":{"x":-153.8022628036648,"y":887.707785998049}},{"width":384,"height":483,"id":"EnsembleRetriever-LOMKa","type":"genericNode","position":{"x":532.336769273322,"y":288.33611134066325},"data":{"type":"EnsembleRetriever","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import List\nfrom langchain.retrievers import BM25Retriever, EnsembleRetriever\nfrom langchain.schema import Document, BaseRetriever\nfrom langchain.vectorstores.base import VectorStore\n\nfrom genflow import CustomComponent\n\n\nclass EnsembleRetrieverComponent(CustomComponent):\n    display_name: str = \"Ensemble Retriever\"\n    description: str = \"The EnsembleRetriever takes a list of retrievers as input.\"\n    documentation: str = \"https://docs.aiplanet.com/components/retrievers#ensemble-retriever\"\n    beta = False\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"retrievers\": {\n                \"display_name\": \"Retrievers\",\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": 2,\n                \"info\": \"The number of results to return.\",\n            },\n            \"weights\": {\n                \"display_name\": \"Weights\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"0.5, 0.5\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        top_k: int,\n        weights: str,\n        documents: List[Document],\n        retrievers: List[VectorStore],\n    ) -> BaseRetriever:\n        docs = [document.page_content for document in documents]\n        bm25_retriever = BM25Retriever.from_texts(docs)\n        bm25_retriever.k = top_k\n\n        _retrievers = [\n            _retriever.as_retriever(search_kwargs={\"k\": top_k})\n            for _retriever in retrievers\n        ]\n        _retrievers.append(bm25_retriever)\n\n        _weights = [\n            int(_weight) if isinstance(_weight, int) else float(_weight)\n            for _weight in weights.split(\",\")\n        ]\n\n        return EnsembleRetriever(retrievers=_retrievers, weights=_weights)\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"retrievers":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retrievers","display_name":"Retrievers","advanced":false,"dynamic":false,"info":"","type":"VectorStore","list":true},"top_k":{"required":true,"placeholder":"","show":true,"multiline":false,"value":2,"password":false,"name":"top_k","display_name":"Top K","advanced":false,"dynamic":false,"info":"The number of results to return.","type":"int","list":false},"weights":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"0.5, 0.5","password":false,"name":"weights","display_name":"Weights","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"The EnsembleRetriever takes a list of retrievers as input.","base_classes":["BaseRetriever"],"display_name":"Ensemble Retriever","custom_fields":{"documents":null,"retrievers":null,"top_k":null,"weights":null},"output_types":["EnsembleRetriever"],"documentation":"https://docs.aiplanet.com/components/retrievers#ensemble-retriever","beta":false,"error":null},"id":"EnsembleRetriever-LOMKa"},"selected":false,"positionAbsolute":{"x":532.336769273322,"y":288.33611134066325},"dragging":false},{"width":384,"height":339,"id":"RetrievalQA-b1i7z","type":"genericNode","position":{"x":1861.9406814972847,"y":-223.9217741873479},"data":{"type":"RetrievalQA","node":{"template":{"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"combine_documents_chain":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"combine_documents_chain","advanced":false,"dynamic":false,"info":"","type":"BaseCombineDocumentsChain","list":false},"memory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"memory","advanced":false,"dynamic":false,"info":"","type":"BaseMemory","list":false},"retriever":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retriever","advanced":false,"dynamic":false,"info":"","type":"BaseRetriever","list":false},"input_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"query","password":false,"name":"input_key","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"output_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"result","password":false,"name":"output_key","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"return_source_documents":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"return_source_documents","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"tags":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"verbose","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"_type":"RetrievalQA"},"description":"Chain for question-answering against an index.","base_classes":["RetrievalQA","Chain","BaseRetrievalQA","Callable"],"display_name":"RetrievalQA","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/chains#retrievalqa-chain","beta":false,"error":null},"id":"RetrievalQA-b1i7z"},"selected":false,"positionAbsolute":{"x":1861.9406814972847,"y":-223.9217741873479},"dragging":false},{"width":384,"height":333,"id":"CombineDocsChain-ABGk9","type":"genericNode","position":{"x":1180.6061760247026,"y":-420.0635257627883},"data":{"type":"CombineDocsChain","node":{"template":{"llm":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","type":"BaseLanguageModel","list":false},"chain_type":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"stuff","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"_type":"load_qa_chain"},"description":"Load question answering chain.","base_classes":["BaseCombineDocumentsChain","Callable"],"display_name":"CombineDocsChain","custom_fields":{},"output_types":[],"documentation":"","beta":false,"error":null},"id":"CombineDocsChain-ABGk9"},"positionAbsolute":{"x":1180.6061760247026,"y":-420.0635257627883}},{"width":384,"height":457,"id":"Input-CrRFO","type":"genericNode","position":{"x":-1964.5701150346747,"y":14.520112515414326},"data":{"type":"Input","node":{"template":{"input_value":{"required":false,"placeholder":"","show":true,"multiline":true,"value":"","password":false,"name":"input_value","display_name":"Input Value","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"file_path":null},"input_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"Video URL","password":false,"name":"input_key","display_name":"Input Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"input_type":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"Url","password":false,"options":["File","Url","Text"],"name":"input_type","display_name":"Input Type","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"_type":"Input"},"description":"Input is used to specify the type of input.","base_classes":["Input"],"display_name":"Input","custom_fields":{},"output_types":["Input"],"documentation":"https://docs.aiplanet.com/components/inputs","beta":false,"error":null},"id":"Input-CrRFO"},"selected":false,"positionAbsolute":{"x":-1964.5701150346747,"y":14.520112515414326},"dragging":false}],"edges":[{"source":"YoutubeLoader-sdO8v","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œYoutubeLoaderœ,œidœ:œYoutubeLoader-sdO8vœ}","target":"RecursiveCharacterTextSplitter-GmD6h","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"RecursiveCharacterTextSplitter-GmD6h","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"YoutubeLoader","id":"YoutubeLoader-sdO8v"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-YoutubeLoader-sdO8v{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œYoutubeLoaderœ,œidœ:œYoutubeLoader-sdO8vœ}-RecursiveCharacterTextSplitter-GmD6h{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"RecursiveCharacterTextSplitter-GmD6h","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ}","target":"Chroma-lIlqp","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œChroma-lIlqpœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Chroma-lIlqp","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-GmD6h"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-GmD6h{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ}-Chroma-lIlqp{œfieldNameœ:œdocumentsœ,œidœ:œChroma-lIlqpœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"HuggingFaceEmbeddingInferenceAPI-5IgOP","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-5IgOPœ}","target":"Chroma-lIlqp","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-lIlqpœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-lIlqp","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings"],"dataType":"HuggingFaceEmbeddingInferenceAPI","id":"HuggingFaceEmbeddingInferenceAPI-5IgOP"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-HuggingFaceEmbeddingInferenceAPI-5IgOP{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingInferenceAPIœ,œidœ:œHuggingFaceEmbeddingInferenceAPI-5IgOPœ}-Chroma-lIlqp{œfieldNameœ:œembeddingœ,œidœ:œChroma-lIlqpœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"RecursiveCharacterTextSplitter-GmD6h","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ}","target":"EnsembleRetriever-LOMKa","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-LOMKaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"EnsembleRetriever-LOMKa","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-GmD6h"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-GmD6h{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-GmD6hœ}-EnsembleRetriever-LOMKa{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-LOMKaœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"Chroma-lIlqp","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-lIlqpœ}","target":"EnsembleRetriever-LOMKa","targetHandle":"{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-LOMKaœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}","data":{"targetHandle":{"fieldName":"retrievers","id":"EnsembleRetriever-LOMKa","inputTypes":null,"type":"VectorStore"},"sourceHandle":{"baseClasses":["VectorStore","BaseRetriever"],"dataType":"Chroma","id":"Chroma-lIlqp"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Chroma-lIlqp{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-lIlqpœ}-EnsembleRetriever-LOMKa{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-LOMKaœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"},{"source":"ChatOpenAI-runGt","sourceHandle":"{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ,œChatOpenAIœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-runGtœ}","target":"CombineDocsChain-ABGk9","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-ABGk9œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"CombineDocsChain-ABGk9","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLanguageModel","BaseChatModel","ChatOpenAI","BaseLLM"],"dataType":"ChatOpenAI","id":"ChatOpenAI-runGt"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-ChatOpenAI-runGt{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ,œChatOpenAIœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-runGtœ}-CombineDocsChain-ABGk9{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-ABGk9œ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"},{"source":"CombineDocsChain-ABGk9","sourceHandle":"{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ABGk9œ}","target":"RetrievalQA-b1i7z","targetHandle":"{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","data":{"targetHandle":{"fieldName":"combine_documents_chain","id":"RetrievalQA-b1i7z","inputTypes":null,"type":"BaseCombineDocumentsChain"},"sourceHandle":{"baseClasses":["BaseCombineDocumentsChain","Callable"],"dataType":"CombineDocsChain","id":"CombineDocsChain-ABGk9"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-CombineDocsChain-ABGk9{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-ABGk9œ}-RetrievalQA-b1i7z{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"},{"source":"ConversationBufferMemory-7lETV","sourceHandle":"{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-7lETVœ}","target":"RetrievalQA-b1i7z","targetHandle":"{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}","data":{"targetHandle":{"fieldName":"memory","id":"RetrievalQA-b1i7z","inputTypes":null,"type":"BaseMemory"},"sourceHandle":{"baseClasses":["BaseChatMemory","ConversationBufferMemory","BaseMemory"],"dataType":"ConversationBufferMemory","id":"ConversationBufferMemory-7lETV"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-ConversationBufferMemory-7lETV{œbaseClassesœ:[œBaseChatMemoryœ,œConversationBufferMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-7lETVœ}-RetrievalQA-b1i7z{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"},{"source":"EnsembleRetriever-LOMKa","sourceHandle":"{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-LOMKaœ}","target":"RetrievalQA-b1i7z","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"RetrievalQA-b1i7z","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["BaseRetriever"],"dataType":"EnsembleRetriever","id":"EnsembleRetriever-LOMKa"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-EnsembleRetriever-LOMKa{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-LOMKaœ}-RetrievalQA-b1i7z{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-b1i7zœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"},{"source":"Input-CrRFO","sourceHandle":"{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-CrRFOœ}","target":"YoutubeLoader-sdO8v","targetHandle":"{œfieldNameœ:œyoutube_urlœ,œidœ:œYoutubeLoader-sdO8vœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"youtube_url","id":"YoutubeLoader-sdO8v","inputTypes":["Input"],"type":"str"},"sourceHandle":{"baseClasses":["Input"],"dataType":"Input","id":"Input-CrRFO"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Input-CrRFO{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-CrRFOœ}-YoutubeLoader-sdO8v{œfieldNameœ:œyoutube_urlœ,œidœ:œYoutubeLoader-sdO8vœ,œinputTypesœ:[œInputœ],œtypeœ:œstrœ}"}],"viewport":{"x":588.0764175514927,"y":314.12801312180187,"zoom":0.24823905988154005}},"description":"Conversational Cartography Unlocked.","name":"Youtube Chat","flow_type":"chat"}