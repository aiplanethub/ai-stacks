{
  "id": "6198e0a8-a753-4bff-8c95-0922038157c4",
  "data": {
    "nodes": [
      {
        "width": 384,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-frvMq",
        "type": "genericNode",
        "position": { "x": 588.3528655395515, "y": -151.92541965939355 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chunk_overlap": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 200,
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "The amount of overlap between chunks.",
                "type": "int",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "The maximum length of each chunk.",
                "type": "int",
                "list": false
              },
              "documents": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "The documents to split.",
                "type": "Document",
                "list": true
              },
              "separators": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "separators",
                "display_name": "Separators",
                "advanced": false,
                "dynamic": false,
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "type": "str",
                "list": true
              }
            },
            "description": "Split text into chunks of a specified length.",
            "base_classes": ["Document"],
            "display_name": "Recursive Character Text Splitter",
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "documents": null,
              "separators": null
            },
            "output_types": ["RecursiveCharacterTextSplitter"],
            "documentation": "https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter",
            "beta": true,
            "error": null
          },
          "id": "RecursiveCharacterTextSplitter-frvMq"
        },
        "positionAbsolute": { "x": 588.3528655395515, "y": -151.92541965939355 }
      },
      {
        "width": 384,
        "height": 291,
        "id": "Chroma-u7zd6",
        "type": "genericNode",
        "position": { "x": 1427.9452423025498, "y": 5.745915841583582 },
        "data": {
          "type": "Chroma",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chroma_server_cors_allow_origins": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_cors_allow_origins",
                "display_name": "Server CORS Allow Origins",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_grpc_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_grpc_port",
                "display_name": "Server gRPC Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_host": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_host",
                "display_name": "Server Host",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "chroma_server_port": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chroma_server_port",
                "display_name": "Server Port",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "chroma_server_ssl_enabled": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "chroma_server_ssl_enabled",
                "display_name": "Server SSL Enabled",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "collection_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "genflow",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "documents": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Document",
                "list": true
              },
              "embedding": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Embeddings",
                "list": false
              },
              "persist": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": true,
                "password": false,
                "name": "persist",
                "display_name": "Persist",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "persist_directory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "/mnt/models/chroma",
                "password": false,
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Implementation of Vector Store using Chroma",
            "base_classes": ["VectorStore", "BaseRetriever"],
            "display_name": "Chroma",
            "custom_fields": {
              "chroma_server_cors_allow_origins": null,
              "chroma_server_grpc_port": null,
              "chroma_server_host": null,
              "chroma_server_port": null,
              "chroma_server_ssl_enabled": null,
              "collection_name": null,
              "documents": null,
              "embedding": null,
              "persist": null,
              "persist_directory": null
            },
            "output_types": ["Chroma"],
            "documentation": "https://docs.aiplanet.com/components/vector-store#chroma",
            "beta": true,
            "error": null
          },
          "id": "Chroma-u7zd6"
        },
        "positionAbsolute": { "x": 1427.9452423025498, "y": 5.745915841583582 },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 683,
        "id": "ConversationBufferWindowMemory-6AKVZ",
        "type": "genericNode",
        "position": { "x": 1623.9204251274195, "y": -954.9679265342252 },
        "data": {
          "type": "ConversationBufferWindowMemory",
          "node": {
            "template": {
              "chat_memory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseChatMessageHistory",
                "list": false
              },
              "ai_prefix": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": "AI",
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "human_prefix": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": "Human",
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "type": "str",
                "list": false
              },
              "k": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 10,
                "password": false,
                "name": "k",
                "display_name": "Memory Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "memory_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "output_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "type": "str",
                "list": false
              },
              "return_messages": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ConversationBufferWindowMemory"
            },
            "description": "Buffer for storing conversation memory inside a limited size window.",
            "base_classes": [
              "ConversationBufferWindowMemory",
              "BaseMemory",
              "BaseChatMemory"
            ],
            "display_name": "ConversationBufferWindowMemory",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/memories#conversationbufferwindowmemory",
            "beta": false,
            "error": null
          },
          "id": "ConversationBufferWindowMemory-6AKVZ"
        },
        "positionAbsolute": {
          "x": 1623.9204251274195,
          "y": -954.9679265342252
        },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 629,
        "id": "ChatOpenAI-jiXKA",
        "type": "genericNode",
        "position": { "x": 2224.478783811598, "y": -1095.152179286811 },
        "data": {
          "type": "ChatOpenAI",
          "node": {
            "template": {
              "callbacks": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "callbacks",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "langchain.callbacks.base.BaseCallbackHandler",
                "list": true
              },
              "async_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "async_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "cache": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "cache",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "default_headers": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_headers",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "default_query": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "default_query",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "http_client": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "http_client",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "max_retries": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 2,
                "password": false,
                "name": "max_retries",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "max_tokens": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "max_tokens",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false,
                "value": ""
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_kwargs": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "model_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "gpt-4-1106-preview",
                "password": false,
                "options": [
                  "gpt-4-1106-preview",
                  "gpt-4",
                  "gpt-4-32k",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k"
                ],
                "name": "model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "n": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": 1,
                "password": false,
                "name": "n",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "openai_api_base": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": false,
                "dynamic": false,
                "info": "\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n",
                "type": "str",
                "list": false
              },
              "openai_api_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_organization": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_proxy": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "request_timeout": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "request_timeout",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "streaming": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "streaming",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "tags": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tags",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "temperature": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 0.7,
                "password": false,
                "name": "temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "tiktoken_model_name": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "tiktoken_model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "verbose": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "verbose",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ChatOpenAI"
            },
            "description": "`OpenAI` Chat large language models API.",
            "base_classes": [
              "BaseChatModel",
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "display_name": "ChatOpenAI",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/large-language-models#chatopenai",
            "beta": false,
            "error": null
          },
          "id": "ChatOpenAI-jiXKA"
        },
        "positionAbsolute": { "x": 2224.478783811598, "y": -1095.152179286811 },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 563,
        "id": "RetrievalQAPrompt-fB3WQ",
        "type": "genericNode",
        "position": { "x": 2789.728387769324, "y": -278.39642336007796 },
        "data": {
          "type": "RetrievalQAPrompt",
          "node": {
            "template": {
              "code": {
                "dynamic": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "from typing import Optional, Union, Callable\nfrom genflow import CustomComponent\nfrom genflow.field_typing import (\n    BasePromptTemplate,\n    BaseLanguageModel,\n    BaseMemory,\n    Chain,\n    BaseRetriever,\n)\nfrom langchain.chains import RetrievalQA\n\n\nclass RetrievalQAPromptComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a RetrievalQA using Prompt.\n    \"\"\"\n\n    display_name: str = \"RetrievalQAPrompt\"\n    description: str = \"Implementation of RetrievalQA using Prompt\"\n    documentation: str = \"https://docs.aiplanet.com/components/chains#retreivalqaprompt\"\n    beta: bool = True\n    \n    CHAIN_TYPE_OPTIONS = [\n        'stuff','map_reduce','refine','map_rerank'\n    ]\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"chain_type\":{\"display\":\"chain_type\",\"value\":\"stuff\",\"options\":self.CHAIN_TYPE_OPTIONS,\"required\":True},\n            \"llm\":{\"display_name\":\"LLM\",\"required\":True},\n            \"prompt\":{\"display_name\":\"Prompt\",\"required\":True},\n            \"memory\":{\"display_name\":\"Memory\"},\n            \"retriever\":{\"display_name\":\"Retriever\",\"required\":True}\n        }\n\n    def build(\n       self,\n       llm:BaseLanguageModel,\n       prompt: BasePromptTemplate,\n       chain_type:str,\n       retriever: BaseRetriever,\n       memory: Optional[BaseMemory] = None,\n    ) -> Chain:\n        \"\"\"\n        Builds the RetrievalQA with prompt\n\n        Args:\n        - llm: Large Language Models\n        - chain_type: used to load a specific type of chain for question-answering\n        - chain_type_kwargs: chain keywords argument to pass prompt\n        - retriever: vector store to retrieve k relevant context information\n\n        Returns:\n        - Chain: The RetrievalQA chain with Prompt, Retriever and LLM\n        \"\"\"\n        return RetrievalQA.from_chain_type(llm=llm,\n                                           chain_type=chain_type,\n                                           chain_type_kwargs={\"prompt\":prompt},\n                                           retriever=retriever.as_retriever(search_kwargs={\"k\": 4}),\n                                           return_source_documents=True\n                                    )\n",
                "password": false,
                "name": "code",
                "advanced": false,
                "type": "code",
                "list": false
              },
              "_type": "CustomComponent",
              "chain_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "stuff",
                "password": false,
                "options": ["stuff", "map_reduce", "refine", "map_rerank"],
                "name": "chain_type",
                "display_name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "llm": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseLanguageModel",
                "list": false
              },
              "memory": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseMemory",
                "list": false
              },
              "prompt": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "prompt",
                "display_name": "Prompt",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BasePromptTemplate",
                "list": false
              },
              "retriever": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "BaseRetriever",
                "list": false
              }
            },
            "description": "Implementation of RetrievalQA using Prompt",
            "base_classes": ["Chain"],
            "display_name": "RetrievalQAPrompt",
            "custom_fields": {
              "chain_type": null,
              "llm": null,
              "memory": null,
              "prompt": null,
              "retriever": null
            },
            "output_types": ["RetrievalQAPrompt"],
            "documentation": "https://docs.aiplanet.com/components/chains#retreivalqaprompt",
            "beta": true,
            "error": null
          },
          "id": "RetrievalQAPrompt-fB3WQ"
        },
        "positionAbsolute": {
          "x": 2789.728387769324,
          "y": -278.39642336007796
        },
        "selected": false,
        "dragging": false
      },
      {
        "width": 384,
        "height": 243,
        "id": "ChatPromptTemplate-VSCjS",
        "type": "genericNode",
        "position": { "x": 2073.2457484768966, "y": 336.5205552150286 },
        "data": {
          "type": "ChatPromptTemplate",
          "node": {
            "template": {
              "messages": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "messages",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "BaseMessagePromptTemplate",
                "list": true
              },
              "output_parser": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "output_parser",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "BaseOutputParser",
                "list": false
              },
              "input_types": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "input_types",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "dict",
                "list": false
              },
              "input_variables": {
                "required": true,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "input_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "str",
                "list": true
              },
              "partial_variables": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "partial_variables",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "dict",
                "list": false
              },
              "validate_template": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "validate_template",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "bool",
                "list": false
              },
              "_type": "ChatPromptTemplate"
            },
            "description": "A prompt template for chat models.",
            "base_classes": [
              "ChatPromptTemplate",
              "BaseChatPromptTemplate",
              "BasePromptTemplate"
            ],
            "display_name": "ChatPromptTemplate",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/prompts#chat-prompt-template",
            "beta": false,
            "error": null
          },
          "id": "ChatPromptTemplate-VSCjS"
        },
        "positionAbsolute": { "x": 2073.2457484768966, "y": 336.5205552150286 }
      },
      {
        "width": 384,
        "height": 489,
        "id": "HumanMessagePromptTemplate-3HdYi",
        "type": "genericNode",
        "position": { "x": 1596.861687172587, "y": 507.9179952610235 },
        "data": {
          "type": "HumanMessagePromptTemplate",
          "node": {
            "template": {
              "additional_kwargs": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": false,
                "password": false,
                "name": "additional_kwargs",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "type": "dict",
                "list": false
              },
              "prompt": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "<|system|>>\nYou are an Multilingual chatbot that follows instructions extremely well. You have the context given and you use this to help the user.\nYou have to answer the user's question ONLY in the language that the user asked the question in.\nPlease be truthful and give direct answers. Please say 'I don't know' if user query is not in CONTEXT\n\nCONTEXT: {context}\n</s>\n<|user|>\n{question}\n</s>\n<|assistant|>",
                "password": false,
                "name": "prompt",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "type": "prompt",
                "list": false
              },
              "_type": "HumanMessagePromptTemplate",
              "context": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "",
                "password": false,
                "name": "context",
                "display_name": "context",
                "advanced": false,
                "input_types": ["Document", "BaseOutputParser", "Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "question": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "",
                "password": false,
                "name": "question",
                "display_name": "question",
                "advanced": false,
                "input_types": ["Document", "BaseOutputParser", "Input"],
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              }
            },
            "description": "Human message prompt template. This is a message sent from the user.",
            "base_classes": [
              "BaseMessagePromptTemplate",
              "BaseStringMessagePromptTemplate",
              "HumanMessagePromptTemplate"
            ],
            "name": "",
            "display_name": "HumanMessagePromptTemplate",
            "documentation": "https://docs.aiplanet.com/components/prompts#human-message-prompt-template",
            "custom_fields": { "prompt": ["context", "question"] },
            "output_types": [],
            "field_formatters": {},
            "beta": false,
            "error": null
          },
          "id": "HumanMessagePromptTemplate-3HdYi"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": { "x": 1596.861687172587, "y": 507.9179952610235 }
      },
      {
        "width": 384,
        "height": 457,
        "id": "Input-qQKja",
        "type": "genericNode",
        "position": { "x": -599.2699830836839, "y": -104.35187665149479 },
        "data": {
          "type": "Input",
          "node": {
            "template": {
              "input_value": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": true,
                "value": "Non_Criminal_Affidavit.pdf",
                "password": false,
                "name": "input_value",
                "display_name": "Input Value",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "file_path": "/mnt/models/files/6198e0a8-a753-4bff-8c95-0922038157c4/7fffeb850c72e95a9175757ae0c94f24ca198a02404ed761cef6da2474a2e5c3.pdf"
              },
              "input_key": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "Pdf_file",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "input_type": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "File",
                "password": false,
                "options": ["File", "Url", "Text"],
                "name": "input_type",
                "display_name": "Input Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "_type": "Input"
            },
            "description": "Input is used to specify the type of input.",
            "base_classes": ["Input"],
            "display_name": "Input",
            "custom_fields": {},
            "output_types": ["Input"],
            "documentation": "https://docs.aiplanet.com/components/inputs",
            "beta": false,
            "error": null
          },
          "id": "Input-qQKja"
        },
        "selected": false,
        "positionAbsolute": {
          "x": -599.2699830836839,
          "y": -104.35187665149479
        },
        "dragging": false
      },
      {
        "width": 384,
        "height": 375,
        "id": "PyPDFLoader-Abfep",
        "type": "genericNode",
        "position": { "x": 13.823428660939157, "y": -93.67080676047347 },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "suffixes": [".pdf"],
                "password": false,
                "name": "file_path",
                "advanced": false,
                "input_types": ["Input"],
                "dynamic": false,
                "info": "",
                "type": "file",
                "list": false,
                "fileTypes": ["pdf"],
                "file_path": null
              },
              "file_size": {
                "required": true,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 20,
                "password": false,
                "name": "file_size",
                "display_name": "Fize Size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "metadata": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [{ "": "" }],
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": ["Document"],
            "display_name": "PyPDFLoader",
            "custom_fields": {},
            "output_types": ["Document"],
            "documentation": "https://docs.aiplanet.com/components/document-loaders#pypdfloader",
            "beta": false,
            "error": null
          },
          "id": "PyPDFLoader-Abfep"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": { "x": 13.823428660939157, "y": -93.67080676047347 }
      },
      {
        "width": 384,
        "height": 453,
        "id": "OpenAIEmbeddings-8eZie",
        "type": "genericNode",
        "position": { "x": 434.6575823671787, "y": 489.5156092892899 },
        "data": {
          "type": "OpenAIEmbeddings",
          "node": {
            "template": {
              "allowed_special": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": [],
                "password": false,
                "name": "allowed_special",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "async_client": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "async_client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "chunk_size": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 1000,
                "password": false,
                "name": "chunk_size",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "client": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "default_headers": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "default_headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "default_query": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "default_query",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "deployment": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "text-embedding-ada-002",
                "password": false,
                "name": "deployment",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "disallowed_special": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": ["()"],
                "password": false,
                "name": "disallowed_special",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": true
              },
              "embedding_ctx_length": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 8191,
                "password": false,
                "name": "embedding_ctx_length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "headers": {
                "required": false,
                "placeholder": "",
                "show": false,
                "multiline": true,
                "value": "{\"Authorization\": \"Bearer <token>\"}",
                "password": false,
                "name": "headers",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "http_client": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "http_client",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "Any",
                "list": false
              },
              "max_retries": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": 2,
                "password": false,
                "name": "max_retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "int",
                "list": false
              },
              "model": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "text-embedding-ada-002",
                "password": false,
                "name": "model",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "model_kwargs": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "model_kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "dict",
                "list": false
              },
              "openai_api_base": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "openai_api_base",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "openai_api_key": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": "",
                "password": true,
                "name": "openai_api_key",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_api_type": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "openai_api_type",
                "display_name": "OpenAI API Type",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "openai_api_version": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "openai_api_version",
                "display_name": "OpenAI API Version",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "openai_organization": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "openai_organization",
                "display_name": "OpenAI Organization",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "openai_proxy": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "openai_proxy",
                "display_name": "OpenAI Proxy",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false
              },
              "request_timeout": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": false,
                "name": "request_timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "float",
                "list": false
              },
              "show_progress_bar": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "show_progress_bar",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "skip_empty": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "value": false,
                "password": false,
                "name": "skip_empty",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "type": "bool",
                "list": false
              },
              "tiktoken_model_name": {
                "required": false,
                "placeholder": "",
                "show": true,
                "multiline": false,
                "password": true,
                "name": "tiktoken_model_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "type": "str",
                "list": false,
                "value": ""
              },
              "_type": "OpenAIEmbeddings"
            },
            "description": "OpenAI embedding models.",
            "base_classes": ["OpenAIEmbeddings", "Embeddings"],
            "display_name": "OpenAIEmbeddings",
            "custom_fields": {},
            "output_types": [],
            "documentation": "https://docs.aiplanet.com/components/embeddings#openai-embedding",
            "beta": false,
            "error": null
          },
          "id": "OpenAIEmbeddings-8eZie"
        },
        "selected": false,
        "dragging": false,
        "positionAbsolute": { "x": 434.6575823671787, "y": 489.5156092892899 }
      }
    ],
    "edges": [
      {
        "source": "ChatPromptTemplate-VSCjS",
        "sourceHandle": "{œbaseClassesœ:[œChatPromptTemplateœ,œBaseChatPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-VSCjSœ}",
        "target": "RetrievalQAPrompt-fB3WQ",
        "targetHandle": "{œfieldNameœ:œpromptœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "prompt",
            "id": "RetrievalQAPrompt-fB3WQ",
            "inputTypes": null,
            "type": "BasePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "ChatPromptTemplate",
              "BaseChatPromptTemplate",
              "BasePromptTemplate"
            ],
            "dataType": "ChatPromptTemplate",
            "id": "ChatPromptTemplate-VSCjS"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatPromptTemplate-VSCjS{œbaseClassesœ:[œChatPromptTemplateœ,œBaseChatPromptTemplateœ,œBasePromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-VSCjSœ}-RetrievalQAPrompt-fB3WQ{œfieldNameœ:œpromptœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"
      },
      {
        "source": "HumanMessagePromptTemplate-3HdYi",
        "sourceHandle": "{œbaseClassesœ:[œBaseMessagePromptTemplateœ,œBaseStringMessagePromptTemplateœ,œHumanMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-3HdYiœ}",
        "target": "ChatPromptTemplate-VSCjS",
        "targetHandle": "{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-VSCjSœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}",
        "data": {
          "targetHandle": {
            "fieldName": "messages",
            "id": "ChatPromptTemplate-VSCjS",
            "inputTypes": null,
            "type": "BaseMessagePromptTemplate"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMessagePromptTemplate",
              "BaseStringMessagePromptTemplate",
              "HumanMessagePromptTemplate"
            ],
            "dataType": "HumanMessagePromptTemplate",
            "id": "HumanMessagePromptTemplate-3HdYi"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-HumanMessagePromptTemplate-3HdYi{œbaseClassesœ:[œBaseMessagePromptTemplateœ,œBaseStringMessagePromptTemplateœ,œHumanMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-3HdYiœ}-ChatPromptTemplate-VSCjS{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-VSCjSœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"
      },
      {
        "source": "ConversationBufferWindowMemory-6AKVZ",
        "sourceHandle": "{œbaseClassesœ:[œConversationBufferWindowMemoryœ,œBaseMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-6AKVZœ}",
        "target": "RetrievalQAPrompt-fB3WQ",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "RetrievalQAPrompt-fB3WQ",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "ConversationBufferWindowMemory",
              "BaseMemory",
              "BaseChatMemory"
            ],
            "dataType": "ConversationBufferWindowMemory",
            "id": "ConversationBufferWindowMemory-6AKVZ"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferWindowMemory-6AKVZ{œbaseClassesœ:[œConversationBufferWindowMemoryœ,œBaseMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-6AKVZœ}-RetrievalQAPrompt-fB3WQ{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      },
      {
        "source": "ChatOpenAI-jiXKA",
        "sourceHandle": "{œbaseClassesœ:[œBaseChatModelœ,œChatOpenAIœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-jiXKAœ}",
        "target": "RetrievalQAPrompt-fB3WQ",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "RetrievalQAPrompt-fB3WQ",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseChatModel",
              "ChatOpenAI",
              "BaseLanguageModel",
              "BaseLLM"
            ],
            "dataType": "ChatOpenAI",
            "id": "ChatOpenAI-jiXKA"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOpenAI-jiXKA{œbaseClassesœ:[œBaseChatModelœ,œChatOpenAIœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-jiXKAœ}-RetrievalQAPrompt-fB3WQ{œfieldNameœ:œllmœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "RecursiveCharacterTextSplitter-frvMq",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-frvMqœ}",
        "target": "Chroma-u7zd6",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œChroma-u7zd6œ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "Chroma-u7zd6",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-frvMq"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-frvMq{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-frvMqœ}-Chroma-u7zd6{œfieldNameœ:œdocumentsœ,œidœ:œChroma-u7zd6œ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Chroma-u7zd6",
        "sourceHandle": "{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-u7zd6œ}",
        "target": "RetrievalQAPrompt-fB3WQ",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQAPrompt-fB3WQ",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": ["VectorStore", "BaseRetriever"],
            "dataType": "Chroma",
            "id": "Chroma-u7zd6"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Chroma-u7zd6{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-u7zd6œ}-RetrievalQAPrompt-fB3WQ{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAPrompt-fB3WQœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "PyPDFLoader-Abfep",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-Abfepœ}",
        "target": "RecursiveCharacterTextSplitter-frvMq",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-frvMqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-frvMq",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-Abfep"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-Abfep{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-Abfepœ}-RecursiveCharacterTextSplitter-frvMq{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-frvMqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "Input-qQKja",
        "sourceHandle": "{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-qQKjaœ}",
        "target": "PyPDFLoader-Abfep",
        "targetHandle": "{œfieldNameœ:œfile_pathœ,œidœ:œPyPDFLoader-Abfepœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}",
        "data": {
          "targetHandle": {
            "fieldName": "file_path",
            "id": "PyPDFLoader-Abfep",
            "inputTypes": ["Input"],
            "type": "file"
          },
          "sourceHandle": {
            "baseClasses": ["Input"],
            "dataType": "Input",
            "id": "Input-qQKja"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-Input-qQKja{œbaseClassesœ:[œInputœ],œdataTypeœ:œInputœ,œidœ:œInput-qQKjaœ}-PyPDFLoader-Abfep{œfieldNameœ:œfile_pathœ,œidœ:œPyPDFLoader-Abfepœ,œinputTypesœ:[œInputœ],œtypeœ:œfileœ}"
      },
      {
        "source": "OpenAIEmbeddings-8eZie",
        "sourceHandle": "{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-8eZieœ}",
        "target": "Chroma-u7zd6",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-u7zd6œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-u7zd6",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": ["OpenAIEmbeddings", "Embeddings"],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-8eZie"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OpenAIEmbeddings-8eZie{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-8eZieœ}-Chroma-u7zd6{œfieldNameœ:œembeddingœ,œidœ:œChroma-u7zd6œ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      }
    ],
    "viewport": {
      "x": -80.655330978155,
      "y": 320.02471838838505,
      "zoom": 0.6565350030250091
    }
  },
  "description": "Multilingual RAG chat",
  "name": "Multilingual",
  "flow_type": "chat"
}
