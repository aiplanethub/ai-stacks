{"id":"9c15cbb3-3529-41a5-8895-d27b902b8b4e","data":{"nodes":[{"width":384,"height":375,"id":"PyPDFLoader-3WfKr","type":"genericNode","position":{"x":-15.45820328756008,"y":41.13551745214098},"data":{"type":"PyPDFLoader","node":{"template":{"file_path":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"A New Raghunath Level 1 Version 2.pdf","suffixes":[".pdf"],"password":false,"name":"file_path","advanced":false,"input_types":["Input"],"dynamic":false,"info":"","type":"file","list":false,"fileTypes":["pdf"],"file_path":"/mnt/models/files/9c15cbb3-3529-41a5-8895-d27b902b8b4e/85938fa8cbbcd2c29e20b5d927f5da7dd6954c73625e5d4a29ba6a32c1d7c50c.pdf"},"file_size":{"required":true,"placeholder":"","show":true,"multiline":false,"value":20,"password":false,"name":"file_size","display_name":"Fize Size","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"metadata":{"required":false,"placeholder":"","show":true,"multiline":false,"value":[],"password":false,"name":"metadata","display_name":"Metadata","advanced":false,"dynamic":false,"info":"","type":"dict","list":false},"_type":"PyPDFLoader"},"description":"Load PDF using pypdf into list of documents.","base_classes":["Document"],"display_name":"PyPDFLoader","custom_fields":{},"output_types":["Document"],"documentation":"https://docs.aiplanet.com/components/document-loaders#pypdfloader","beta":false,"error":null},"id":"PyPDFLoader-3WfKr"},"positionAbsolute":{"x":-15.45820328756008,"y":41.13551745214098},"selected":false,"dragging":false},{"width":384,"height":501,"id":"RecursiveCharacterTextSplitter-KdpWz","type":"genericNode","position":{"x":643.1385293123183,"y":-208.46963691219648},"data":{"type":"RecursiveCharacterTextSplitter","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom genflow import CustomComponent\nfrom langchain.schema import Document\nfrom genflow.utils.util import build_loader_repr_from_documents\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter\"\n    \n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        self.repr_value = build_loader_repr_from_documents(docs)\n        return docs\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chunk_overlap":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"200","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","type":"int","list":false},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":1000,"password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","type":"int","list":false},"documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","type":"Document","list":true},"separators":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","type":"str","list":true}},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","custom_fields":{"chunk_overlap":null,"chunk_size":null,"documents":null,"separators":null},"output_types":["RecursiveCharacterTextSplitter"],"documentation":"https://docs.aiplanet.com/components/text-splitters#recursivecharactertextsplitter","beta":true,"error":null},"id":"RecursiveCharacterTextSplitter-KdpWz"},"selected":false,"positionAbsolute":{"x":643.1385293123183,"y":-208.46963691219648},"dragging":false},{"width":384,"height":291,"id":"Chroma-mHVWg","type":"genericNode","position":{"x":1047.0741952575406,"y":377.4071667802011},"data":{"type":"Chroma","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional, Union\nfrom genflow import CustomComponent\n\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.schema import Document\nfrom langchain.vectorstores.base import VectorStore\nfrom langchain.schema import BaseRetriever\nfrom langchain.embeddings.base import Embeddings\nimport chromadb  # type: ignore\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://docs.aiplanet.com/components/vector-store#chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"value\": \"genflow\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist\": {\n                \"display_name\": \"Persist\",\n                \"value\": True,\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"persist_directory\": {\n                \"display_name\": \"Persist Directory\",\n                \"value\": \"/mnt/models/chroma\",\n                \"required\": False,\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        chroma_server_ssl_enabled: bool,\n        collection_name: Optional[str] = \"genflow\",\n        persist: Optional[bool] = True,\n        persist_directory: Optional[str] = \"/mnt/models/chroma\",\n        embedding: Optional[Embeddings] = None,\n        documents: Optional[Document] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins\n                or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        if embedding is not None:\n            return Chroma(\n                persist_directory=persist_directory,\n                client_settings=chroma_settings,\n                embedding_function=embedding,\n                collection_name=collection_name,\n            )\n\n        return Chroma(\n            persist_directory=persist_directory, client_settings=chroma_settings\n        )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chroma_server_cors_allow_origins":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_grpc_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_host":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_port","display_name":"Server Port","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"chroma_server_ssl_enabled":{"required":true,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"collection_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"genflow","password":false,"name":"collection_name","display_name":"Collection Name","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"documents":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"embedding":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","type":"Embeddings","list":false},"persist":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"persist","display_name":"Persist","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"persist_directory":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"/mnt/models/chroma","password":false,"name":"persist_directory","display_name":"Persist Directory","advanced":true,"dynamic":false,"info":"","type":"str","list":false}},"description":"Implementation of Vector Store using Chroma","base_classes":["VectorStore","BaseRetriever"],"display_name":"Chroma","custom_fields":{"chroma_server_cors_allow_origins":null,"chroma_server_grpc_port":null,"chroma_server_host":null,"chroma_server_port":null,"chroma_server_ssl_enabled":null,"collection_name":null,"documents":null,"embedding":null,"persist":null,"persist_directory":null},"output_types":["Chroma"],"documentation":"https://docs.aiplanet.com/components/vector-store#chroma","beta":true,"error":null},"id":"Chroma-mHVWg"},"selected":false,"positionAbsolute":{"x":1047.0741952575406,"y":377.4071667802011},"dragging":false},{"width":384,"height":483,"id":"EnsembleRetriever-OBCsD","type":"genericNode","position":{"x":1417.6427122846712,"y":-325.66977374710586},"data":{"type":"EnsembleRetriever","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import List\nfrom langchain.retrievers import BM25Retriever, EnsembleRetriever\nfrom langchain.schema import Document, BaseRetriever\nfrom langchain.vectorstores.base import VectorStore\n\nfrom genflow import CustomComponent\n\n\nclass EnsembleRetrieverComponent(CustomComponent):\n    display_name: str = \"Ensemble Retriever\"\n    description: str = \"The EnsembleRetriever takes a list of retrievers as input.\"\n    documentation: str = \"https://docs.aiplanet.com/components/retrievers#ensemble-retriever\"\n    beta = False\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"retrievers\": {\n                \"display_name\": \"Retrievers\",\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": 2,\n                \"info\": \"The number of results to return.\",\n            },\n            \"weights\": {\n                \"display_name\": \"Weights\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"0.5, 0.5\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        top_k: int,\n        weights: str,\n        documents: List[Document],\n        retrievers: List[VectorStore],\n    ) -> BaseRetriever:\n        docs = [document.page_content for document in documents]\n        bm25_retriever = BM25Retriever.from_texts(docs)\n        bm25_retriever.k = top_k\n\n        _retrievers = [\n            _retriever.as_retriever(search_kwargs={\"k\": top_k})\n            for _retriever in retrievers\n        ]\n        _retrievers.append(bm25_retriever)\n\n        _weights = [\n            int(_weight) if isinstance(_weight, int) else float(_weight)\n            for _weight in weights.split(\",\")\n        ]\n\n        return EnsembleRetriever(retrievers=_retrievers, weights=_weights)\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"retrievers":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retrievers","display_name":"Retrievers","advanced":false,"dynamic":false,"info":"","type":"VectorStore","list":true},"top_k":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"4","password":false,"name":"top_k","display_name":"Top K","advanced":false,"dynamic":false,"info":"The number of results to return.","type":"int","list":false},"weights":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"0.5, 0.5","password":false,"name":"weights","display_name":"Weights","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"The EnsembleRetriever takes a list of retrievers as input.","base_classes":["BaseRetriever"],"display_name":"Ensemble Retriever","custom_fields":{"documents":null,"retrievers":null,"top_k":null,"weights":null},"output_types":["EnsembleRetriever"],"documentation":"https://docs.aiplanet.com/components/retrievers#ensemble-retriever","beta":false,"error":null},"id":"EnsembleRetriever-OBCsD"},"positionAbsolute":{"x":1417.6427122846712,"y":-325.66977374710586},"selected":false,"dragging":false},{"width":384,"height":563,"id":"RetrievalQAPrompt-NNxNo","type":"genericNode","position":{"x":2922.5036789712512,"y":-275.06596814505406},"data":{"type":"RetrievalQAPrompt","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":true,"multiline":true,"value":"from typing import Optional, Union, Callable\nfrom genflow import CustomComponent\nfrom genflow.field_typing import (\n    BasePromptTemplate,\n    BaseLanguageModel,\n    BaseMemory,\n    Chain,\n    BaseRetriever,\n)\nfrom langchain.chains import RetrievalQA\n\n\nclass RetrievalQAPromptComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a RetrievalQA using Prompt.\n    \"\"\"\n\n    display_name: str = \"RetrievalQAPrompt\"\n    description: str = \"Implementation of RetrievalQA using Prompt\"\n    documentation: str = \"https://docs.aiplanet.com/components/chains#retreivalqaprompt\"\n    beta: bool = True\n    \n    CHAIN_TYPE_OPTIONS = [\n        'stuff','map_reduce','refine','map_rerank'\n    ]\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"chain_type\":{\"display\":\"chain_type\",\"value\":\"stuff\",\"options\":self.CHAIN_TYPE_OPTIONS,\"required\":True},\n            \"llm\":{\"display_name\":\"LLM\",\"required\":True},\n            \"prompt\":{\"display_name\":\"Prompt\",\"required\":True},\n            \"memory\":{\"display_name\":\"Memory\"},\n            \"retriever\":{\"display_name\":\"Retriever\",\"required\":True}\n        }\n\n    def build(\n       self,\n       llm:BaseLanguageModel,\n       prompt: BasePromptTemplate,\n       chain_type:str,\n       retriever: BaseRetriever,\n       memory: Optional[BaseMemory] = None,\n    ) -> Chain:\n        \"\"\"\n        Builds the RetrievalQA with prompt\n\n        Args:\n        - llm: Large Language Models\n        - chain_type: used to load a specific type of chain for question-answering\n        - chain_type_kwargs: chain keywords argument to pass prompt\n        - retriever: vector store to retrieve k relevant context information\n\n        Returns:\n        - Chain: The RetrievalQA chain with Prompt, Retriever and LLM\n        \"\"\"\n        return RetrievalQA.from_chain_type(llm=llm,\n                                           chain_type=chain_type,\n                                           chain_type_kwargs={\"prompt\":prompt},\n                                           retriever=retriever,\n                                           return_source_documents=True\n                                    )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chain_type":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"stuff","password":false,"options":["stuff","map_reduce","refine","map_rerank"],"name":"chain_type","display_name":"chain_type","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"llm":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","type":"BaseLanguageModel","list":false},"memory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"memory","display_name":"Memory","advanced":false,"dynamic":false,"info":"","type":"BaseMemory","list":false},"prompt":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"prompt","display_name":"Prompt","advanced":false,"dynamic":false,"info":"","type":"BasePromptTemplate","list":false},"retriever":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"retriever","display_name":"Retriever","advanced":false,"dynamic":false,"info":"","type":"BaseRetriever","list":false}},"description":"Implementation of RetrievalQA using Prompt","base_classes":["Chain"],"display_name":"RetrievalQAPrompt","custom_fields":{"chain_type":null,"llm":null,"memory":null,"prompt":null,"retriever":null},"output_types":["Chain"],"documentation":"https://docs.aiplanet.com/components/chains#retreivalqaprompt","beta":true,"error":null},"id":"RetrievalQAPrompt-NNxNo"},"selected":false,"positionAbsolute":{"x":2922.5036789712512,"y":-275.06596814505406},"dragging":false},{"width":384,"height":735,"id":"AzureChatOpenAI-1yNnV","type":"genericNode","position":{"x":2288.7020154697366,"y":-930.3929711617146},"data":{"type":"AzureChatOpenAI","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom genflow.interface.custom import CustomComponent\nfrom langchain.llms.base import BaseLLM\nfrom langchain.chat_models import AzureChatOpenAI\n\n\nclass AzureChatOpenAILLM(CustomComponent):\n    display_name: str = \"AzureChatOpenAI\"\n    description: str = \"Azure Chat Open AI Chat&Completion large language models.\"\n    documentation: str = \"https://docs.aiplanet.com/components/large-language-models#azurechatopenai\"\n    \n    AZURE_OPENAI_MODELS = [\n        \"gpt-4\",\n        \"gpt-4-32k\",\n        \"gpt-4-vision\",\n    ]\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"gpt-4\",\n                \"options\": self.AZURE_OPENAI_MODELS,\n                \"required\": True,\n            },\n            \"api_key\": {\n                \"display_name\": \"AzureChatOpenAI API Key\",\n                \"required\": True,\n                \"password\": True,\n            },\n            \"api_base\": {\n                \"display_name\": \"AzureChatOpenAI API Base\",\n                \"required\": True,\n            },\n            \"api_type\": {\"display_name\": \"AzureChatOpenAI API Type\", \"required\": True},\n            \"azure_deployment\": {\n                \"display_name\": \"Deployment Name\",\n                \"required\": True,\n            },\n            \"api_version\": {\n                \"display_name\": \"API Version\",\n                \"value\": \"2023-07-01-preview\",\n                \"required\": True,\n                \"advanced\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"value\": 0.5,\n                \"field_type\": \"float\",\n                \"required\": False,\n            },\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"value\": 512,\n                \"required\": False,\n                \"field_type\": \"int\",\n                \"advanced\": True,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str,\n        api_base: str,\n        api_type: str,\n        api_key: str,\n        azure_deployment: str,\n        api_version: str = \"2023-05-15\",\n        temperature: Optional[float] = 0.7,\n        max_tokens: Optional[int] = 512,\n    ) -> BaseLLM:\n        try:\n            output = AzureChatOpenAI(\n                model_name=model,\n                openai_api_base=api_base,\n                openai_api_type=api_type,\n                openai_api_key=api_key,\n                openai_api_version=api_version,\n                deployment_name=azure_deployment,\n                temperature=temperature,\n                max_tokens=max_tokens,\n            )\n        except Exception as e:\n            raise ValueError(\"Could not connect to Azure ChatOpenAI model.\") from e\n        return output\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","api_base":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"api_base","display_name":"AzureChatOpenAI API Base","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"https://gpt-res.openai.azure.com/"},"api_key":{"required":true,"placeholder":"","show":true,"multiline":false,"password":true,"name":"api_key","display_name":"AzureChatOpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":""},"api_type":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"api_type","display_name":"AzureChatOpenAI API Type","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"azure"},"api_version":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"2023-07-01-preview","password":false,"name":"api_version","display_name":"API Version","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"azure_deployment":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"azure_deployment","display_name":"Deployment Name","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"gpt4-inference"},"max_tokens":{"required":false,"placeholder":"","show":true,"multiline":false,"value":512,"password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"model":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"gpt-4","password":false,"options":["gpt-4","gpt-4-32k","gpt-4-vision"],"name":"model","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"temperature":{"required":false,"placeholder":"","show":true,"multiline":false,"value":0.5,"password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","type":"float","list":false}},"description":"Azure Chat Open AI Chat&Completion large language models.","base_classes":["BaseLLM","BaseLanguageModel"],"display_name":"AzureChatOpenAI","custom_fields":{"api_base":null,"api_key":null,"api_type":null,"api_version":null,"azure_deployment":null,"max_tokens":null,"model":null,"temperature":null},"output_types":["AzureChatOpenAI"],"documentation":"https://docs.aiplanet.com/components/large-language-models#azurechatopenai","beta":true,"error":null},"id":"AzureChatOpenAI-1yNnV"},"selected":false,"positionAbsolute":{"x":2288.7020154697366,"y":-930.3929711617146},"dragging":false},{"width":384,"height":683,"id":"ConversationBufferWindowMemory-rEC0z","type":"genericNode","position":{"x":1796.0109110119554,"y":-796.4575252896964},"data":{"type":"ConversationBufferWindowMemory","node":{"template":{"chat_memory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chat_memory","advanced":false,"dynamic":false,"info":"","type":"BaseChatMessageHistory","list":false},"ai_prefix":{"required":false,"placeholder":"","show":false,"multiline":false,"value":"AI","password":false,"name":"ai_prefix","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"human_prefix":{"required":false,"placeholder":"","show":false,"multiline":false,"value":"Human","password":false,"name":"human_prefix","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"input_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"input_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Input when more than one variable is available.","type":"str","list":false},"k":{"required":true,"placeholder":"","show":true,"multiline":false,"value":10,"password":false,"name":"k","display_name":"Memory Size","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"memory_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"chat_history","password":false,"name":"memory_key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"output_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":false,"name":"output_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)","type":"str","list":false},"return_messages":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"return_messages","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"_type":"ConversationBufferWindowMemory"},"description":"Buffer for storing conversation memory inside a limited size window.","base_classes":["ConversationBufferWindowMemory","BaseChatMemory","BaseMemory"],"display_name":"ConversationBufferWindowMemory","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/memories#conversationbufferwindowmemory","beta":false,"error":null},"id":"ConversationBufferWindowMemory-rEC0z"},"selected":false,"positionAbsolute":{"x":1796.0109110119554,"y":-796.4575252896964},"dragging":false},{"width":384,"height":243,"id":"ChatPromptTemplate-j4WZj","type":"genericNode","position":{"x":2109.521447242715,"y":301.22110366933293},"data":{"type":"ChatPromptTemplate","node":{"template":{"messages":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"messages","advanced":false,"dynamic":true,"info":"","type":"BaseMessagePromptTemplate","list":true},"output_parser":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"output_parser","advanced":false,"dynamic":true,"info":"","type":"BaseOutputParser","list":false},"input_types":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"input_types","advanced":false,"dynamic":true,"info":"","type":"dict","list":false},"input_variables":{"required":true,"placeholder":"","show":false,"multiline":false,"password":false,"name":"input_variables","advanced":false,"dynamic":true,"info":"","type":"str","list":true},"partial_variables":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"partial_variables","advanced":false,"dynamic":true,"info":"","type":"dict","list":false},"validate_template":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"validate_template","advanced":false,"dynamic":true,"info":"","type":"bool","list":false},"_type":"ChatPromptTemplate"},"description":"A prompt template for chat models.","base_classes":["BasePromptTemplate","BaseChatPromptTemplate","ChatPromptTemplate"],"display_name":"ChatPromptTemplate","custom_fields":{},"output_types":[],"documentation":"https://docs.aiplanet.com/components/prompts#chat-prompt-template","beta":false,"error":null},"id":"ChatPromptTemplate-j4WZj"},"selected":false,"positionAbsolute":{"x":2109.521447242715,"y":301.22110366933293},"dragging":false},{"width":384,"height":489,"id":"HumanMessagePromptTemplate-5bRgC","type":"genericNode","position":{"x":1607.890864271316,"y":391.4912305529224},"data":{"type":"HumanMessagePromptTemplate","node":{"template":{"additional_kwargs":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"additional_kwargs","advanced":true,"dynamic":true,"info":"","type":"dict","list":false},"prompt":{"required":true,"placeholder":"","show":true,"multiline":true,"value":"<|system|>>\nYou are an Multilingual chatbot that follows instructions extremely well. You have the context given and you use this to help the user.\nYou have to answer the user's question ONLY in the language that the user asked the question in.\nPlease be truthful and give direct answers. Please say 'I don't know' if user query is not in CONTEXT\n\nCONTEXT: {context}\n</s>\n<|user|>\n{question}\n</s>\n<|assistant|>","password":false,"name":"prompt","advanced":false,"dynamic":true,"info":"","type":"prompt","list":false},"_type":"HumanMessagePromptTemplate","context":{"required":false,"placeholder":"","show":true,"multiline":true,"value":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Document","BaseOutputParser","Input"],"dynamic":false,"info":"","type":"str","list":false},"question":{"required":false,"placeholder":"","show":true,"multiline":true,"value":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Document","BaseOutputParser","Input"],"dynamic":false,"info":"","type":"str","list":false}},"description":"Human message prompt template. This is a message sent from the user.","base_classes":["BaseStringMessagePromptTemplate","BaseMessagePromptTemplate","HumanMessagePromptTemplate"],"name":"","display_name":"HumanMessagePromptTemplate","documentation":"https://docs.aiplanet.com/components/prompts#human-message-prompt-template","custom_fields":{"prompt":["context","question"]},"output_types":[],"field_formatters":{},"beta":false,"error":null},"id":"HumanMessagePromptTemplate-5bRgC"},"selected":true,"positionAbsolute":{"x":1607.890864271316,"y":391.4912305529224},"dragging":false},{"width":384,"height":645,"id":"AzureOpenAIEmbeddings-revHb","type":"genericNode","position":{"x":408.21864111984064,"y":533.4695865878359},"data":{"type":"AzureOpenAIEmbeddings","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":true,"multiline":true,"value":"from genflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.embeddings import AzureOpenAIEmbeddings\n\nclass AzureOpenAIEmbeddingsComponent(CustomComponent):\n    display_name: str = \"AzureOpenAI Embeddings\"\n    description: str = \"\"\"Access Azure OpenAI Embedding i.e., Text-Ada version 2\"\"\"\n    documentation: str = \"https://docs.aiplanet.com/components/embeddings#azure-openai-embeddings\"\n    beta = False\n\n    def build_config(self):\n        return {\n            \"api_key\": {\n                \"display_name\": \"AzureOpenAI API Key\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"endpoint\": {\n                \"display_name\": \"Azure Endpoint\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"version\": {\n                \"display_name\": \"OpenAI Version\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"deployment_name\": {\n                \"display_name\": \"Azure Deployment Name\",\n                \"is_list\": False,\n                \"required\": True,\n                \"value\": \"\",\n            },\n            \"code\": {\"show\": True},\n        }\n\n    def build(self, api_key: str, endpoint: str, version: str, deployment_name: str) -> Embeddings:\n        return AzureOpenAIEmbeddings(\n            azure_deployment=deployment_name,\n            azure_endpoint = endpoint,\n            openai_api_key = api_key,\n            openai_api_version=version\n            )\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","api_key":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"d6d9522a01c74836907af2f3fd72ff85","password":false,"name":"api_key","display_name":"AzureOpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"deployment_name":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"text-embed-marketplace","password":false,"name":"deployment_name","display_name":"Azure Deployment Name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"endpoint":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"https://marketplace.openai.azure.com/","password":false,"name":"endpoint","display_name":"Azure Endpoint","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"version":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"2023-05-15","password":false,"name":"version","display_name":"OpenAI Version","advanced":false,"dynamic":false,"info":"","type":"str","list":false}},"description":"Access Azure OpenAI Embedding i.e., Text-Ada version 2","base_classes":["Embeddings"],"display_name":"AzureOpenAI Embeddings","custom_fields":{"api_key":null,"deployment_name":null,"endpoint":null,"version":null},"output_types":["AzureOpenAIEmbeddings"],"documentation":"https://docs.aiplanet.com/components/embeddings#azure-openai-embeddings","beta":false,"error":null},"id":"AzureOpenAIEmbeddings-revHb"},"positionAbsolute":{"x":408.21864111984064,"y":533.4695865878359}}],"edges":[{"source":"AzureChatOpenAI-1yNnV","sourceHandle":"{œbaseClassesœ:[œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-1yNnVœ}","target":"RetrievalQAPrompt-NNxNo","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"RetrievalQAPrompt-NNxNo","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLLM","BaseLanguageModel"],"dataType":"AzureChatOpenAI","id":"AzureChatOpenAI-1yNnV"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-AzureChatOpenAI-1yNnV{œbaseClassesœ:[œBaseLLMœ,œBaseLanguageModelœ],œdataTypeœ:œAzureChatOpenAIœ,œidœ:œAzureChatOpenAI-1yNnVœ}-RetrievalQAPrompt-NNxNo{œfieldNameœ:œllmœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"},{"source":"ConversationBufferWindowMemory-rEC0z","sourceHandle":"{œbaseClassesœ:[œConversationBufferWindowMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-rEC0zœ}","target":"RetrievalQAPrompt-NNxNo","targetHandle":"{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}","data":{"targetHandle":{"fieldName":"memory","id":"RetrievalQAPrompt-NNxNo","inputTypes":null,"type":"BaseMemory"},"sourceHandle":{"baseClasses":["ConversationBufferWindowMemory","BaseChatMemory","BaseMemory"],"dataType":"ConversationBufferWindowMemory","id":"ConversationBufferWindowMemory-rEC0z"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-ConversationBufferWindowMemory-rEC0z{œbaseClassesœ:[œConversationBufferWindowMemoryœ,œBaseChatMemoryœ,œBaseMemoryœ],œdataTypeœ:œConversationBufferWindowMemoryœ,œidœ:œConversationBufferWindowMemory-rEC0zœ}-RetrievalQAPrompt-NNxNo{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"},{"source":"EnsembleRetriever-OBCsD","sourceHandle":"{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-OBCsDœ}","target":"RetrievalQAPrompt-NNxNo","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"RetrievalQAPrompt-NNxNo","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["BaseRetriever"],"dataType":"EnsembleRetriever","id":"EnsembleRetriever-OBCsD"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-EnsembleRetriever-OBCsD{œbaseClassesœ:[œBaseRetrieverœ],œdataTypeœ:œEnsembleRetrieverœ,œidœ:œEnsembleRetriever-OBCsDœ}-RetrievalQAPrompt-NNxNo{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"},{"source":"RecursiveCharacterTextSplitter-KdpWz","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ}","target":"EnsembleRetriever-OBCsD","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-OBCsDœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"EnsembleRetriever-OBCsD","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-KdpWz"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-KdpWz{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ}-EnsembleRetriever-OBCsD{œfieldNameœ:œdocumentsœ,œidœ:œEnsembleRetriever-OBCsDœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"Chroma-mHVWg","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-mHVWgœ}","target":"EnsembleRetriever-OBCsD","targetHandle":"{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-OBCsDœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}","data":{"targetHandle":{"fieldName":"retrievers","id":"EnsembleRetriever-OBCsD","inputTypes":null,"type":"VectorStore"},"sourceHandle":{"baseClasses":["VectorStore","BaseRetriever"],"dataType":"Chroma","id":"Chroma-mHVWg"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-Chroma-mHVWg{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-mHVWgœ}-EnsembleRetriever-OBCsD{œfieldNameœ:œretrieversœ,œidœ:œEnsembleRetriever-OBCsDœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"},{"source":"PyPDFLoader-3WfKr","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-3WfKrœ}","target":"RecursiveCharacterTextSplitter-KdpWz","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"RecursiveCharacterTextSplitter-KdpWz","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"PyPDFLoader","id":"PyPDFLoader-3WfKr"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-PyPDFLoader-3WfKr{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-3WfKrœ}-RecursiveCharacterTextSplitter-KdpWz{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"RecursiveCharacterTextSplitter-KdpWz","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ}","target":"Chroma-mHVWg","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œChroma-mHVWgœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Chroma-mHVWg","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"RecursiveCharacterTextSplitter","id":"RecursiveCharacterTextSplitter-KdpWz"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-KdpWz{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-KdpWzœ}-Chroma-mHVWg{œfieldNameœ:œdocumentsœ,œidœ:œChroma-mHVWgœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"HumanMessagePromptTemplate-5bRgC","sourceHandle":"{œbaseClassesœ:[œBaseStringMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œHumanMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-5bRgCœ}","target":"ChatPromptTemplate-j4WZj","targetHandle":"{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-j4WZjœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}","data":{"targetHandle":{"fieldName":"messages","id":"ChatPromptTemplate-j4WZj","inputTypes":null,"type":"BaseMessagePromptTemplate"},"sourceHandle":{"baseClasses":["BaseStringMessagePromptTemplate","BaseMessagePromptTemplate","HumanMessagePromptTemplate"],"dataType":"HumanMessagePromptTemplate","id":"HumanMessagePromptTemplate-5bRgC"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-HumanMessagePromptTemplate-5bRgC{œbaseClassesœ:[œBaseStringMessagePromptTemplateœ,œBaseMessagePromptTemplateœ,œHumanMessagePromptTemplateœ],œdataTypeœ:œHumanMessagePromptTemplateœ,œidœ:œHumanMessagePromptTemplate-5bRgCœ}-ChatPromptTemplate-j4WZj{œfieldNameœ:œmessagesœ,œidœ:œChatPromptTemplate-j4WZjœ,œinputTypesœ:null,œtypeœ:œBaseMessagePromptTemplateœ}"},{"source":"ChatPromptTemplate-j4WZj","sourceHandle":"{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-j4WZjœ}","target":"RetrievalQAPrompt-NNxNo","targetHandle":"{œfieldNameœ:œpromptœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}","data":{"targetHandle":{"fieldName":"prompt","id":"RetrievalQAPrompt-NNxNo","inputTypes":null,"type":"BasePromptTemplate"},"sourceHandle":{"baseClasses":["BasePromptTemplate","BaseChatPromptTemplate","ChatPromptTemplate"],"dataType":"ChatPromptTemplate","id":"ChatPromptTemplate-j4WZj"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-ChatPromptTemplate-j4WZj{œbaseClassesœ:[œBasePromptTemplateœ,œBaseChatPromptTemplateœ,œChatPromptTemplateœ],œdataTypeœ:œChatPromptTemplateœ,œidœ:œChatPromptTemplate-j4WZjœ}-RetrievalQAPrompt-NNxNo{œfieldNameœ:œpromptœ,œidœ:œRetrievalQAPrompt-NNxNoœ,œinputTypesœ:null,œtypeœ:œBasePromptTemplateœ}"},{"source":"AzureOpenAIEmbeddings-revHb","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-revHbœ}","target":"Chroma-mHVWg","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-mHVWgœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-mHVWg","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings"],"dataType":"AzureOpenAIEmbeddings","id":"AzureOpenAIEmbeddings-revHb"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"id":"reactflow__edge-AzureOpenAIEmbeddings-revHb{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œAzureOpenAIEmbeddingsœ,œidœ:œAzureOpenAIEmbeddings-revHbœ}-Chroma-mHVWg{œfieldNameœ:œembeddingœ,œidœ:œChroma-mHVWgœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"}],"viewport":{"x":40.47127517567753,"y":487.5297808244869,"zoom":0.6928934623102174}},"description":"Multilingual RAG chat","name":"Multilingual","flow_type":"chat"}